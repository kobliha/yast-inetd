<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<!-- $Id$ -->
<meta name="generator"
content="HTML Tidy for Linux/x86 (vers 1st April 2002), see www.w3.org" />
<title>(x)inetd module in Autoyast in SuSE Linux 9.0</title>

<style type="text/css">
/*<![CDATA[*/
 table.c7 {text-align: left;}
 span.c6 {font-style: italic;}
 span.c5 {font-family: monospace;}
 td.c3 {vertical-align: top; text-align: center; white-space: nowrap;}
 span.c1 {font-weight: bold;}
  /*]]>*/
</style>
</head>
<body>
<h1>(x)inetd module in Autoyast in SuSE Linux 9.0</h1>

<p>Martin Vidner &lt;mvidner@suse.cz&gt; and
Petr Hadraba.</p>

<p>This document describes the format of the inetd/xinetd part of the Autoyast
profile. It focuses on creating the profile without using the GUI Configuration
Management System.</p>

<h2>Source structures (XML) description</h2>

<p>First, an example:</p>

<pre><![CDATA[
<profile>
 <configure>
  ...
  <inetd>
    <netd_service config:type="symbol">xinetd</netd_service>
    <netd_status config:type="integer">0</netd_status>
    <netd_conf config:type="list">
      <listentry>
	<script>imap</script>
	<service>pop3</service>
	<enabled config:type="boolean">true</enabled>
      </listentry>
      <listentry>
	<server>in.ftpd</server>
	<server_args>-A</server_args>
	<enabled config:type="boolean">true</enabled>
      <listentry>
	<service>daytime</service>
	<protocol>tcp</protocol>
      </listentry>
      ...
      <listentry>...</listentry>
    </netd_conf>
  </inetd>
  ...
 </configure>
</profile>
]]>
</pre>

<p>The profile has elements to specify which superserver should be used
(<code>netd_service</code>), whether it should be enabled
(<code>netd_status</code>) and how the services should be configured
(<code>netd_conf</code>).</p>

<p>A service description element has conceptually two parts: key and non-key.
When writing the configuration, services are matched using the key fields and
to the matching service, non-key fields are applied. If no service matches, it
is created. If more services match, a warning is reported. The key fields are
<code>script</code>, <code>service</code>, <code>protocol</code> and
<code>server</code>.</p>

<p><code>service</code> and <code>protocol</code> are matched
literally. <code>script</code> is the base name of the config file: usually a
file in /etc/xinetd.d, eg. "echo-udp", or "inetd.conf". For <a
href="#compat-82">compatibility with 8.2</a>, <code>server</code> is matched
more loosely: if it is /usr/sbin/tcpd, the real server name is taken from
<code>server_args</code>. After that, the basename of the first
whitespace-sparated word is taken and these values are compared.</p>

<p>TODO finish</p>

<p>Legend for the tables:</p>
<dl>
<dt>O</dt>
<dd>Optional</dd>
<dt>M</dt>
<dd>Mandatory</dd>
<dt>m</dt>
<dd>Mandatory for the daemon, but can be omitted in the profile if the value is
already specified in an existing configuration.</dd>
<dt>N/A</dt>
<dd>Not available</dd>
</dl>

<p>Children of the <code>inetd</code> element:</p>
<table cellpadding="2" cellspacing="2" border="1" class="c7">
<tbody>
<tr>
<td class="c3"><span class="c1">tag</span><br />
</td>
<td class="c3"><span class="c1">data type</span><br />
</td>
<td class="c3"><span class="c1">inetd</span><br />
</td>
<td class="c3"><span class="c1">xinetd</span><br />
</td>
<td class="c3"><span class="c1">description</span><br />
</td>
</tr>

<tr>
<td class="c1"><code>last_created</code><br />
</td>
<td class="c1">integer</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">Used internally by the UI. <br />(Contains last unique number for new iid generator
(for manually added or installed from rpm).)<br />
</td>
</tr>

<tr>
<td class="c1"><code>netd_service</code><br />
</td>
<td class="c1">symbol<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">Contains <tt>inetd</tt> if inetd will be configured, or
<tt>xinetd</tt> for xinetd.<br />
</td>
</tr>

<tr>
<td class="c1"><code>netd_status</code><br />
</td>
<td class="c1">integer<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">The value 0 (zero) means the server ((x)inetd) will be
started, any other value means the server will be stopped and
disabled.<br />
</td>
</tr>

<tr>
<td class="c1"><code>netd_conf</code><br />
</td>
<td class="c1">list<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">A list of &lt;listentry&gt; elements, whose items are described
in the following table.
</td>
</tr>

</tbody>
</table>

<p>Children of a <code>netd_conf/listentry</code> element:</p>

<table id="netd_conf_item" cellpadding="2" cellspacing="2" border="1" class="c7">
<tbody>
<tr>
<td class="c3"><span class="c1">tag</span><br />
</td>
<td class="c3"><span class="c1">data type</span><br />
</td>
<td class="c3"><span class="c1">inetd</span><br />
</td>
<td class="c3"><span class="c1">xinetd</span><br />
</td>
<td class="c3"><span class="c1">description</span><br />
</td>
</tr>

<tr>
<td class="c1"><code>changed</code><br />
</td>
<td class="c1">boolean</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">This should be set to <tt>true</tt>, otherwise the
rest of the service info will be ignored. (In some cases it is not
necessary, but it is too complex to explain.)
TODO now optional and defaults to true
</td>
</tr>

<tr>
<td class="c1"><code>comment</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">Comment preceeding the service description. Can have
multiple lines, initial hashes (#) will be added.</td>
</tr>

<tr>
<td class="c1"><code>created</code><br />
</td>
<td class="c1">boolean<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">Obsolete, ignored.</td>
</tr>

<tr>
<td class="c1"><code>enabled</code><br />
</td>
<td class="c1">boolean<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">If <span class="c5">true</span>, service will be
activated.<br />
TODO now defaults to true
</td>
</tr>

<tr>
<td class="c1"><code>group</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
</td>
</tr>

<tr>
<td class="c1"><code>iid</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">!<br />
</td>
<td class="c1">!<br />
</td>
<td class="c1">"Internal identifier." See <a href="#xinetd">below</a>.<br />
</td>
</tr>

<tr>
<td class="c1"><code>max</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">N/A<br />
</td>
<td class="c1">See inetd man pages.<br />
</td>
</tr>

<tr>
<td class="c1"><code>protocol</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">Service protocol specification (See inetd (xinetd)
man pages for more details.)<br />
Part of the (service,protocol,server) triple that identifies a
service.</td>
</tr>

<tr>
<td class="c1"><code>rpc_version</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
For xinetd, <tt>type = RPC</tt> is automatically added.</td>
</tr>

<tr>
<td class="c1"><code>server</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">Contains full path to service program.<br />
If service is beeing installed, this property contains only server
program filename (without path!) and (rpm-)package name in rounded
brackets.<br />
Part of the (service,protocol,server) triple that identifies a
service.</td>
</tr>

<tr>
<td class="c1"><code>server_args</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
</td>
</tr>

<tr>
<td class="c1"><code>service</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">M<br />
</td>
<td class="c1">Service name.<br />
Part of the (service,protocol,server) triple that identifies a
service.
<!--(rpc_version is separate which may be a bug)-->
</td>
</tr>

<tr>
<td class="c1"><code>socket_type</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
</td>
</tr>

<tr>
<td class="c1"><code>unparsed</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">N/A<br />
</td>
<td class="c1">O<br />
</td>
<td class="c1">Text to be placed into the service block verbatim. Must be
terminated by a newline. Useful for special features of xinetd.<br />
Eg. <pre
><![CDATA[<unparsed>&#9;only_from       = 192.168.0.0/16&#10;</unparsed>]]></pre>
</td>
</tr>

<tr>
<td class="c1"><code>user</code><br />
</td>
<td class="c1">string<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
</td>
</tr>

<tr>
<td class="c1"><code>wait</code><br />
</td>
<td class="c1">boolean<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">m<br />
</td>
<td class="c1">See inetd (xinetd) man pages.<br />
</td>
</tr>

</tbody>
</table>

<!--
applies to 8.2

<h3 id="xinetd">Xinetd</h3>

<h4>Enabling an existing service</h4>

<p>If a RPM package includes a xinetd config file placed in /etc/xinetd.d, the
service can be enabled (or disabled) in this way:</p>
<pre
>  iid: inst
  enabled: true or false
  service: ...
  protocol: ...
  server: ...
</pre>
<p>
Service, protocol and server must match:
(More precisely, the first word of the profile's server field must be contained
in the config file's server field. That's how the profiles created by the
Autoyast Configuration Management System work.)
Other fields in the profile, such as user, are <b>discarded</b>.
</p>

<h4 id="add_srv"
>Adding a new service or changing parameters of an existing one</h4>

<p>
Due to a bug,
changing other parameters of a service works only by adding another copy of the
service configuration (which is OK because by default the already present
configuratin is disabled). Don't be confused by the fact that it is added to
the main configuration file, not to xinetd.d.
</p>
<pre
>  iid: new
  changed: true
  enabled: true or false

  plus other fields as described in the <a href="#netd_conf_item"
>table above</a>.
</pre>

<h3>Inetd</h3>

<h4>Enabling or changing an existing service</h4>

<p>
Changing a service that is in the default inetd.conf file (except VNC related
ones, that's a bug).
</p>
<pre
>  enabled: true or false
  service: ...
  protocol: ...
  server: ...
</pre>
<p>
Service, protocol and server must match.
Server must be with full path and will be /usr/sbin/tcpd for most services.
(That also means that enabling ftp in this way will enable both in.ftpd an
vsftpd, that's a bug.)
<a href="#netd_conf_item">Other fields</a> can be specified.
</p>

<h4>Adding a service</h4>

<p>Works like <a href="#add_srv">adding a service for xinetd</a>.</p>
end of 8.2 stuff
-->


<h3>Compatibility with previous versions</h3>

<h4 id="compat-82">SL 8.2</h4>

<p>TODO, explain "server (package)", iid=inst, iid=new</p>

<h4>SLES 8, SL 8.1</h4>

<p>Sorry, not compatible, bug 28067.</p>
<p>For YaST2 developers, when we add the compatibility: Inetd only, extremely
simple:</p>
<pre>$[
  "start_inetd": true,			// if false, inetd.conf not modified
  "inetd_services": [
    $[
      "service_name": "foo",
      "service_status": "enable",	// or "disable", string! 
    ],
    //...
  ],
]
</pre>

</body>
</html>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-indent-step:nil
End:
-->
