/**
 * File:	include/inetd/dialogs.ycp
 * Package:	Configuration of inetd
 * Summary:	Dialogs definitions
 * Authors:	Petr Hadraba <phadraba@suse.cz>
 *
 * $Id$
 */

{

textdomain "inetd";

import "Inetd";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "inetd/helps.ycp";
include "inetd/routines.ycp";

/**
 * local users and groups are stored here
 * We create both lists only once - during first EditOrCreateServiceDlg() call.
 */
global list(string) local_users  = nil;
global list(string) local_groups = nil;

/**
 * These maps are used for (re)selecting table items. This is new inetd GUI improvement! :o)
 */
global map iid_to_index          = $[];
global map index_to_iid          = $[];

/**
 * used for conversion netd_conf to table's format
 */
global list table_data           = [];

/**
 * Detect installed packages
 * @return `back for abort, `next for continue
 */
global define symbol PackageDialog() ``{

    term contents =
	`VBox(
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(2),
		`Left(`Label(HELPS["install_query"]:"")),
		`HSpacing(2)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(6),
		`VBox(
		    `Left(`CheckBox(`id(`inetd),  _("Install &inetd"))),
		    `Left(`CheckBox(`id(`xinetd), _("Install &xinetd"), true))
		)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`next), `opt(`default), OKButtonLabel()),//_("&OK")),
		`PushButton(`id(`back), CancelButtonLabel())//_("&Cancel"))
		//`HSpacing(2)
	    ),
	    `VSpacing(0.5)
	);

    Wizard::RestoreHelp(HELPS["packages"]:"");

    // Check for installed packages
    Inetd::inetd_installed  = GetInetdInstalled();
    Inetd::xinetd_installed = GetXinetdInstalled();

    // at least one package is required. If no found, user is prompt for install it (them)
    if((Inetd::inetd_installed != 0) && (Inetd::xinetd_installed != 0)) {
	UI::OpenDialog(contents);
	any ret = UI::UserInput();
	boolean install_inetd  = UI::QueryWidget(`id(`inetd),  `Value);
	boolean install_xinetd = UI::QueryWidget(`id(`xinetd), `Value);
	UI::CloseDialog();
	// user press Cancel
	if(ret == `back) {
	    return ret;
	}
	// User will continue
	else {
	    // Determine user selection
	    list packages = [];
	    if(install_inetd) {
		packages = add(packages, "inetd");
	    }
	    if(install_xinetd) {
		packages = add(packages, "xinetd");
	    }
	    if(size(packages) > 0) {
		include "require.ycp";
		DoInstallAndRemove(packages, []);
	    }
	    // Check for installed packages
	    Inetd::inetd_installed  = GetInetdInstalled();
	    Inetd::xinetd_installed = GetXinetdInstalled();
	    // if error ocured, show error and exit.
	    if((Inetd::inetd_installed != 0) && (Inetd::xinetd_installed != 0)) {
		UI::ErrorPopup(HELPS["no_install"]:"");
		return `back;
	    }
	}
    }

    //fillup global variables and obtain services status

    //booth services are installed
    if((Inetd::inetd_installed == 0) && (Inetd::xinetd_installed == 0)) {
	Inetd::netd_service  = `both;
	Inetd::inetd_status  = GetInetdStatus();
	Inetd::xinetd_status = GetXinetdStatus();
    }
    // only inetd is installed
    else if(Inetd::inetd_installed == 0) {
	Inetd::netd_service = `inetd;
	Inetd::inetd_status = GetInetdStatus();
	Inetd::netd_status  = Inetd::inetd_status;
    }
    // only xinetd is installed
    else if(Inetd::xinetd_installed == 0) {
	Inetd::netd_service  = `xinetd;
	Inetd::xinetd_status = GetXinetdStatus();
	Inetd::netd_status   = Inetd::xinetd_status;
    }
    // none is installed
    else {
	Inetd::netd_service = `none;
    }

    return `next;
}

/**
 * Ask user for packages to install
 * @return `back for abort, `next for continue
 */
global define symbol PackageAutoDialog() ``{

    term contents =
	`VBox(
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(2),
		`Left(`Label(HELPS["install_query"]:"")),
		`HSpacing(2)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(6),
		`VBox(
		    `Left(`CheckBox(`id(`inetd),  _("Install &inetd"))),
		    `Left(`CheckBox(`id(`xinetd), _("Install &xinetd"), true))
		)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`next), `opt(`default), OKButtonLabel()),//_("&OK")),
		`PushButton(`id(`back), CancelButtonLabel())//_("&Cancel"))
		//`HSpacing(2)
	    ),
	    `VSpacing(0.5)
	);

    //Wizard::RestoreHelp(HELPS["packages-auto"]:"");

    // Check for installed packages has no meaning here - no packages are installed
    //Inetd::inetd_installed  = GetInetdInstalled();
    //Inetd::xinetd_installed = GetXinetdInstalled();

    // Show Dialog
    UI::OpenDialog(contents);
    any ret = UI::UserInput();
    boolean install_inetd  = UI::QueryWidget(`id(`inetd),  `Value);
    boolean install_xinetd = UI::QueryWidget(`id(`xinetd), `Value);
    UI::CloseDialog();
    // user press Cancel
    if(ret == `back) {
	return ret;
    }
    // User will continue
    else {
	// Determine user selection
	list packages = [];
	if(install_inetd) {
	    packages                = add(packages, "inetd");
	    Inetd::inetd_installed  = 0;
	}
	if(install_xinetd) {
	    packages                = add(packages, "xinetd");
	    Inetd::xinetd_installed = 0;
	}
	if(size(packages) > 0) {
	    include "require.ycp";
	    DoInstallAndRemove(packages, []);
	}
    }

    //fillup global variables and obtain services status

    //booth services are installed
    if((Inetd::inetd_installed == 0) && (Inetd::xinetd_installed == 0)) {
	Inetd::netd_service  = `both;
    }
    // only inetd is installed
    else if(Inetd::inetd_installed == 0) {
	Inetd::netd_service = `inetd;
    }
    // only xinetd is installed
    else if(Inetd::xinetd_installed == 0) {
	Inetd::netd_service  = `xinetd;
    }
    // none is installed
    else {
	Inetd::netd_service = `none;
    }

    return `next;
}

/**
 * Ask user which service wants to configure (if booth installed)
 * @return returns `back for abort and `next for continue
 */
global define symbol WhatToConfigureDialog() ``{

    string caption = _("What service do you want to configure?");

    term contents =
	`VBox(
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(2),
		`Label(_("Please select service you want to configure")),
		`HSpacing(2)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`HSpacing(6),
		`RadioButtonGroup(`id(`selection),
		    `VBox(
			`Left(`RadioButton(`id(`inetd),  _("&inetd"), false)),
			`Left(`RadioButton(`id(`xinetd), _("&xinetd"), true))
		    )
		)
	    ),
	    `VSpacing(0.5),
	    `HBox(
		`PushButton(`id(`next), `opt(`default), OKButtonLabel()),//_("&OK")),
		`PushButton(`id(`back), CancelButtonLabel())//_("&Cancel"))
	    ),
	    `VSpacing(0.5)
	);

    Wizard::RestoreHelp(HELPS["service_selection"]:"");
    UI::OpenDialog(contents);

    any ret = UI::UserInput();

    // Check for selected service
    if(UI::QueryWidget(`id(`inetd), `Value) == true) { // inetd
	Inetd::configured_service = `inetd;
	Inetd::netd_status        = Inetd::inetd_status;
    }
    else {                                             // xinetd
	Inetd::configured_service = `xinetd;
	Inetd::netd_status        = Inetd::xinetd_status;
    }
    // close
    UI::CloseDialog();

    // and exit
    return ret;
}

/**
 * This function regenerates index_to_iid and iid_to_index maps
 * @return
 */
global define indexTable() ``{
    integer index = 0;   // (re)set index
    iid_to_index  = $[]; // clear data
    index_to_iid  = $[]; //   maps are not empty!
    foreach(`line, Inetd::netd_conf, ``{
	// Skip deleted entries
	if (line["deleted"]:false == false) {
	    index        = index + 1;
	    string iid   = lookup(line, "iid", "");
	    iid_to_index = add(iid_to_index, iid, index);
	    index_to_iid = add(index_to_iid, index, iid);
	}
    });
}

/**
 * Configure1 dialog
 * @return dialog result
 */
global define symbol InetdDialog () ``{

    /* XXPkg configure1 dialog contents */
    term contents =
	`VBox(
	    `VSpacing(1),
	    `Left(
		`RadioButtonGroup(
		    `VBox(
			`RadioButton(`id(`stop),     `opt(`notify, `key_F6), _("D&isable"), true),
			`RadioButton(`id(`editable), `opt(`notify, `key_F7), _("Enab&le"), false)
		    )
		)
		//`CheckBox(`id(`editable), `opt(`notify), _("Enable s&uper-server"), false)
	    ),
	    `VSpacing(1),
	      // Main dialog edit inetd.conf
	    `Left(`Label(_("Currently available services"))),
	    `HBox(
		`Table(`id(`table), `header(`Center(_("Ch")), `Center(_("Status")),
		    _("Service"), _("Type "), `Center(_("Protocol")), _("Flags"),
		    _("User"), _("Server"), _("Server / Args")), table_data)
	    ),
	    `HBox(
		`Left(
		    `HBox(
			`HSpacing(1),
			`PushButton(`id(`create), `opt(`key_F2), _("&Add") ),
			`HSpacing(1),
			`PushButton(`id(`edit),   `opt(`key_F4), _("&Edit") ),
			`HSpacing(1),
			`PushButton(`id(`delete), `opt(`key_F8), _("&Delete") )
		    )
		),
		`VSpacing(),
		`Right(
		    `HBox(
			`PushButton(`id(`switch_active), `opt(`key_F3), _("&Toggle status (On/Off)")),
			`HSpacing(1))
		)
	    ),
	    `VSpacing(2)
	);

    any ret = nil;

    // Check for both services installed. Only one can run in real-time
    if(Inetd::netd_service == `both) {
	// ask user
	ret = WhatToConfigureDialog();
	if(ret != `next) {
	    return ret;
	}
    }
    else {
	Inetd::configured_service = Inetd::netd_service;
    }

    // load configuration of selected service (ore installed service --- if only one)
    if(Inetd::configured_service == `inetd) {
	Inetd::netd_conf = Inetd::inetd_conf;
    }
    else {
	Inetd::netd_conf = Inetd::xinetd_conf;
    }

    /* Inetd configure dialog caption */
    string caption = _("Network services configuration");
    if(Inetd::configured_service == `inetd) {
	caption = caption + " (inetd)";
    }
    else {
	caption = caption + " (xinetd)";
    }
    // next line is disabled --- y2base crashes with SIGSEGV
    //string caption = _("Internet super-server configuration") + (Inetd::configured_service == `inetd) ? " (inetd)" : " (xinetd)";

    // initialize GUI
    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    BackButtonLabel(), NextButtonLabel());

    Wizard::ReplaceBackButton(`Empty());

    boolean new_state = false;

    // if service active, enable editting
    if(Inetd::netd_status == 0) {
	new_state = true;
    }
    UI::ChangeWidget(`id(`editable),      `Value,   new_state);
    UI::ChangeWidget(`id(`table),         `Enabled, new_state);
    UI::ChangeWidget(`id(`create),        `Enabled, new_state);
    UI::ChangeWidget(`id(`delete),        `Enabled, new_state);
    UI::ChangeWidget(`id(`edit),          `Enabled, new_state);
    UI::ChangeWidget(`id(`switch_active), `Enabled, new_state);

    table_data = CreateTableData(Inetd::netd_conf);
    indexTable();
    UI::ChangeWidget(`id(`table),         `Items,   table_data);
    
    //used for new iid "generator"
    integer last_created = 0;
    
//    // Generate default configuration
//    SCR::Write(.target.ycp, "/default_conf.ycp", Inetd::xinetd_conf);
    // main loop
    while(true) {

	// item ID for `table stored here will be selected
	string to_select     = "";
	// skip time critical calculations if need_reindex == false (don't call indexTable())
	boolean need_reindex = false;
	// skip time critical calculations if need_rebuild == false (don't call CreateTableData())
	boolean need_rebuild = true;

	ret = UI::UserInput();

        if((ret == `editable) || (ret == `stop)) {
	    boolean new_state = UI::QueryWidget(`id(`editable), `Value);
	    UI::ChangeWidget(`id(`table),         `Enabled, new_state);
	    UI::ChangeWidget(`id(`create),        `Enabled, new_state);
	    UI::ChangeWidget(`id(`delete),        `Enabled, new_state);
	    UI::ChangeWidget(`id(`edit),          `Enabled, new_state);
	    UI::ChangeWidget(`id(`switch_active), `Enabled, new_state);
	    if(new_state) {
		Inetd::netd_status = 0;
	    }
	    else {
		Inetd::netd_status = -1;
	    }
	}
	// create new entry
	else if (ret == `create) {
	    any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
	    any return_val = [];
	    last_created   = last_created + 1; // need uniq
	    // default parameters for new service
	    map  new_line  = $["enabled":true, "service":"", "max":"",
		"socket_type":"stream", "protocol":"tcp", "wait":false, "server_args":"",
		"user":"root", "group":"", "comment":"",
		"iid":"new" + last_created, "created":true];
	    // execute dialog
	    return_val = EditOrCreateServiceDlg(_("Add a new service entry"), new_line);
	    // check Cancel
	    if (return_val != nil) {
		// new service was created --- add to global configuration
		Inetd::addLine(return_val);
		need_reindex = true;                 // iid_to_index and index_to_iid and
		need_rebuild = true;                 //   table_data must be rebuild
		to_select    = "new" + last_created; // select new entry
	    }
	    else {
		need_reindex = false;                // nothing changed
		need_rebuild = false;                //   so skip time-critical calculations
		if (selected_item != nil) {
		    to_select = selected_item;
		}
		else {
		    to_select = index_to_iid[1]:"";
		}
	    }
	}
	// delete new entry
	else if (ret == `delete) {
	    any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);

	    // one line must be selected
	    if (selected_item != nil) {
		need_reindex = true; // see `create (above) for more details
		need_rebuild = true;
		integer old_index = iid_to_index[selected_item]:0;
		Inetd::deleteLine(selected_item);
		if (old_index == size(iid_to_index)) {
		    to_select = index_to_iid[old_index - 1]:"";
		}
		else {
		    to_select = index_to_iid[old_index + 1]:"";
		}
	    }
	    else {
		UI::MessagePopup(_("To delete a service, select one in the main dialog"));
		need_reindex = false;
		need_rebuild = false;
		to_select    = "";
	    }
	}
	// switch service status
	else if (ret == `switch_active) {
	    // get selected line iid
	    any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
	    // notify a line is selected
	    if (selected_item != nil) {
		// look for the selected line
		map current_line = select(filter(`line, Inetd::netd_conf,
		    ``(lookup(line, "iid", "0") == selected_item)), 0, $[]);
		// change status of line
		if (lookup(current_line, "enabled", true) == true) {
		    current_line = add(current_line, "enabled", false);
		}
		else {
		    current_line = add(current_line, "enabled", true);
		}
		// change line in database
		Inetd::changeLine(current_line, selected_item);
		need_reindex = true;
		need_rebuild = true;
		to_select    = selected_item;
	    }
	    else { // No line is selcted:
		UI::MessagePopup(_("To activate or deactivate a service, select it in the main dialog") );
		need_reindex = false;
		need_rebuild = false;
		to_select    = "";
	    }
	}
	// edit service
	else if (ret == `edit) {
	    // get selected line in table
	    need_reindex = false;
	    any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
	    // line must be selected
	    if (selected_item != nil) {
		map current_line = select(filter(`line, Inetd::netd_conf,
		    ``(lookup(line, "iid", "0") == selected_item)), 0, $[]);
		any return_val = EditOrCreateServiceDlg(_("Edit a service entry"), current_line);
		// check for changes
		if (return_val != nil) {
		    Inetd::changeLine(return_val, selected_item);
		}
		need_reindex = true;
		need_rebuild = true;
		to_select = selected_item;
	    }
	    else {
		UI::MessagePopup(_("To edit a service, select one in the main dialog") );
		need_reindex = false;
		need_rebuild = false;
		to_select    = "";
	    }
	}
	else if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
	if(!((ret == `next) || (ret == `back) || (ret == `abort))) {
	    Inetd::modified = true;
	}
	table_data = CreateTableData(Inetd::netd_conf);
	if (need_reindex == true) {
	    indexTable();
	}
	UI::ChangeWidget(`id(`table), `Items,  table_data);
	if (to_select != "") {
	    UI::ChangeWidget(`id(`table), `CurrentItem, to_select);
	}
    }
    
    if(ret == `next) {
	if(IsAnyServiceEnabled(Inetd::netd_conf) == `no) {
	    Inetd::netd_status = -1;
	    UI::ErrorPopup(_("All services are marked as disabled (locked).
Internet super-server will be disabled."));
	}
    }

    return ret;
}

/**
 * Edit or create an entry
 * @param title title specifies the dialog name
 * @param line line specifies new entry data-template
 * @return map nil on Cancel or new entry (map) for netd_conf on OK:
 */
global define EditOrCreateServiceDlg(string title, map line) ``{

    term    inetd_specific   = `IntField(`id(`max), _("Ma&x"), 0, 99999, 0); // inetd specific widgets
    term    xinetd_specific  = `Empty();                                     // xinetd specific widgets
    boolean input_failed     = false;                                        // for all required widgets filled check
    symbol  user_choice      = `back;                                        // for UserInput() loop
    term    inetd_protocols  = `opt(`hstretch, `editable);
    term    xinetd_protocols = `opt(`hstretch);

    // Check for local user list is created...
    if (local_users == nil) {
	local_users = CreateLocalUsersList();
    }
    // Check for local group list is created...
    if (local_groups == nil) {
	local_groups = CreateLocalGroupsList();
    }

    term contents =
	`VBox(
	    `VSquash(
		`HBox(
		    // service name
		    `HWeight(3,
			`TextEntry(`id(`service), _("&Service"))
		    ),
		    `HWeight(1,
			`TextEntry(`id(`rpc_version), _("RPC versio&n"))
		    ),
		    //`VBox(
			//`VSpacing(),
			// service status (running or stopped)
		    `Bottom(`CheckBox(`id(`status), _("service is acti&ve"),
			lookup(line, "enabled", false)))
		    //)
		)
	    ),
	    `HBox(
		// service socket type
		`HWeight(3,
		    `ComboBox(`id(`type), `opt(`hstretch), _("Socket T&ype"),
			["stream", "dgram", "raw", "rdm", "seqpacket"])
		),
		// for protocol option - ediatble ComboBox
		`HWeight(3,
		    `ComboBox(`id(`protocol), (Inetd::configured_service == `inetd) ? inetd_protocols : xinetd_protocols,
			_("&Protocol"), ["tcp", "udp", "rpc/tcp", "rpc/udp"])
		),
		// for flags (wait/nowait) - noneditable ComboBox
		`HWeight(3,
		    `ComboBox(`id(`flags), `opt(`hstretch), _("&Flags"),
			["nowait", "wait"])
		),
		// check for used service - if inetd, add max TextEntry
		`HWeight((Inetd::configured_service == `inetd) ? 1 : 0,
		    (Inetd::configured_service == `inetd) ? inetd_specific : xinetd_specific
		)
	    ),
	    `VBox(
		// user and group ComboBoxes
		`HBox(
		    `ComboBox(`id(`user), _("&User"), local_users),
		    `ComboBox(`id(`group), _("&Group"), local_groups)
		),
		// Server arguments
		`TextEntry(`id(`server), _("S&erver")),
		`TextEntry(`id(`servargs), _("Server argumen&ts")),
		// Comment above the service line in inetd.conf
		`MultiLineEdit(`id(`comment), _("Co&mment"))
	    )
	);

    Wizard::CreateDialog();
    Wizard::SetContentsButtons (
				title,
				contents,
				EditCreateHelp(),
				CancelButtonLabel(),
				AcceptButtonLabel()
				);

    UI::SetFocus(`id(`service));

    /*
     * NOW!! fill widgets
     *
     * inetd has special widget max - we must check it
     */
    if (Inetd::configured_service == `inetd) {
        any max_value = lookup(line, "max", "0");
	if (max_value == "") {
	    max_value = "0";
	}
	UI::ChangeWidget(`id(`max), `Value, tointeger(max_value));
    }
    UI::ChangeWidget(`id(`service),     `Value, lookup(line, "service",     ""));
    UI::ChangeWidget(`id(`rpc_version), `Value, lookup(line, "rpc_version", ""));
    UI::ChangeWidget(`id(`type),        `Value, lookup(line, "socket_type", ""));
    UI::ChangeWidget(`id(`protocol),    `Value, lookup(line, "protocol",    ""));
    if (lookup(line, "wait", true) == true) {
	UI::ChangeWidget(`id(`flags), `Value, "wait");
    }
    else {
	UI::ChangeWidget(`id(`flags), `Value, "nowait");
    }
    UI::ChangeWidget(`id(`user),      `Value, lookup(line, "user",        ""));
    string group = lookup(line, "group", "");
    if (group == "") {
        UI::ChangeWidget(`id(`group), `Value, _("--default--"));
    }
    else {
        UI::ChangeWidget(`id(`group), `Value, group);
    }
    UI::ChangeWidget(`id(`server),    `Value, lookup(line, "server",      ""));
    UI::ChangeWidget(`id(`servargs),  `Value, lookup(line, "server_args", ""));
    UI::ChangeWidget(`id(`comment),   `Value, lookup(line, "comment",     ""));

    Wizard::ReplaceAbortButton(`Empty(`id(`abort)));

    // UI Loop
    repeat {
	user_choice = UI::UserInput();

	if (user_choice != `back) {

	    // Are required values filled?
	    if(((Inetd::configured_service == `inetd) &&
		((UI::QueryWidget(`id(`service), `Value) == "") ||
		//(UI::QueryWidget(`id(`user),    `Value) == "") ||
		(UI::QueryWidget(`id(`server),  `Value) == ""))) ||
		 
		((Inetd::configured_service == `xinetd) &&
		((UI::QueryWidget(`id(`service), `Value) == "")))) {
		//(UI::QueryWidget(`id(`user),     `Value) == "")))) {
		UI::MessagePopup((Inetd::configured_service == `inetd) ?
		    _("The Service or Server field is empty.
Please enter valid values.
") :
		    _("The Service field is empty.
Please enter valid values.
"));
	    input_failed = true;
	    }
	    else if ((UI::QueryWidget(`id(`server), `Value) != "internal") &&
		(UI::QueryWidget(`id(`user), `Value) == _("--default--"))) {
		UI::MessagePopup(_("The user --default-- is reserved only for server internal."));
		input_failed = true;
	    }
	    // YES (input is OK) --- so save settings!
	    else {
		input_failed = false;
		if (UI::QueryWidget(`id(`status), `Value)) {
		    line = add(line, "enabled", true);
		}
		else {
		    line = add(line, "enabled", false);
		}
		if (UI::QueryWidget(`id(`flags), `Value) == "wait") {
		    line = add(line, "wait", true);
		}
		else {
		    line = add(line, "wait", false);
		}
		line = add(line, "service",     UI::QueryWidget(`id(`service),     `Value));
		line = add(line, "rpc_version", UI::QueryWidget(`id(`rpc_version), `Value));
		line = add(line, "socket_type", UI::QueryWidget(`id(`type),        `Value));
		line = add(line, "protocol",    UI::QueryWidget(`id(`protocol),    `Value));
		line = add(line, "flags",       UI::QueryWidget(`id(`flags),       `Value));
		line = add(line, "user",        UI::QueryWidget(`id(`user),        `Value));
		group = UI::QueryWidget(`id(`group), `Value);
		if (group == _("--default--")) {
		    group = "";
		}
		line = add(line, "group",       group);
		line = add(line, "server",      UI::QueryWidget(`id(`server),      `Value));
		line = add(line, "server_args", UI::QueryWidget(`id(`servargs),    `Value));
		line = add(line, "comment",     UI::QueryWidget(`id(`comment),     `Value));
		if (Inetd::configured_service == `inetd) {
		    line = add(line, "max", UI::QueryWidget(`id(`max), `Value));
		}
	    }
	}
    } until (((user_choice == `next) && (input_failed == false)) || (user_choice == `back));
    Wizard::CloseDialog();
    // tell the calling function what user done
    if (user_choice == `back) {
	return(nil);  // operation canceled
    }
    else {
	return(line); // line changed
    }
}

/* EOF */
}
