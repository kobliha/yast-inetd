/**
 * File:	include/inetd/ui.ycp
 * Package:	Configuration of inet
 * Summary:	User interface functions.
 * Authors:	Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * All user interface functions.
 */

{

textdomain "inetd";

import "Wizard";
import "Progress";
import "Inetd";
import "Mode";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";
include "wizard/sequencer.ycp";

include "inetd/helps.ycp";

/**
 * Whole configuration of inet
 */
global define InetSequence () ``{
    map aliases =
	$[
	    "read"	: [ ``( ReadDialog () ), true ],
	    "main"	:   ``( MainSequence () ),
	    "write"	: [ ``( WriteDialog () ), true ]
	];

    map sequence = $[
	"ws_start" : "read",
	"read" :
	$[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" :
	$[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("Inetd configuration");
    term contents = `Label (_("Initializing ..."));

    Wizard::CreateDialog ();
    Wizard::SetContentsButtons ( caption,
				contents,
				"",
				BackButtonLabel (),
				NextButtonLabel ());

    any ret = WizardSequencer (aliases, sequence);

    UI::CloseDialog ();
    return ret;
}

/**
 * Whole configuration of inet but without reading and writing.
 * For use with autoinstallation.
 */
global define InetAutoSequence () ``{
    string caption = _("Inetd configuration");
    term contents = `Label (_("Initializing ..."));

    Wizard::CreateDialog ();
    Wizard::SetContentsButtons ( caption,
				contents,
				"",
				BackButtonLabel (),
				NextButtonLabel ());

    // Run the main configuration workflow
    any ret = MainSequence ();

    UI::CloseDialog ();
    return ret;
}

/**
 * Main workflow of the inet configuration
 */
global define MainSequence () ``{
    // TODO FIXME: adapt the following to your needs!
    map aliases =
	$[
	    "main"	:   	``( MainDialog () ),
	    "configure"	: 	``( ConfigureDialog () )
	];

    // TODO FIXME: adapt the following to your needs!
    map sequence = $[
	"ws_start" : "main",
	"main" :
	$[
	    `abort	: `abort,
	    `next	: `next,
	    `back	: `back,
	    `off	: `next,
	    `on_default	: `next,
	    `on_custom	: "configure"
	],
	"configure" :
	$[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    any ret = WizardSequencer (aliases, sequence);

    return ret;
}


/**
 * Read settings dialog
 */
global define ReadDialog () ``{
    // Set help text
    Wizard::RestoreHelp (ReadDialogHelp ());

    // A callback function for abort
    block callback = ``{
	return UI::PollInput () == `abort;
    };

    // Read the configuration
    boolean was_ok = Inetd::Read ( callback );

    // TODO FIXME possibly handle the abort

    return ( was_ok? `next : `abort );
}

/**
 * Write settings dialog
 */
global define WriteDialog () ``{

    // Set help text
    Wizard::RestoreHelp (WriteDialogHelp ());

    // A callback function for abort
    block callback = ``{
	return UI::PollInput () == `abort;
    };

    // Write the configuration
    boolean was_ok = Inetd::Write ( callback );

    return ( was_ok? `next : `abort );
}

/**
 * Main dialog
 */
global define MainDialog () ``{
    string caption = _("Network services");

    term contents =
	`VBox(
	       `Frame ( _("Enable/disable inetd:"),
			`HSquash(
				`RadioButtonGroup (`id(`inetd), //Group
					`VBox(`Label(""),
						`Left(`RadioButton(`id(`off),`opt(`notify),
								   // main dialog: RasioButton: don't start inetd
								   _("O&ff, don't start inetd"), Inetd::inetd_status == `off  )),
						`Label(""),
						// default on 8.1 is no services, so the option is for future use
						//
						// `Left(`RadioButton(`id(`on_default),`opt(`notify),
						// 		   // main dialog: RasioButton: don't start inetd
						// 		   _("On with d&efault configuration"),
						// 		   Inetd::inetd_status == `on_default )),
						// `Label(""),
						`Left(`RadioButton(`id(`on_custom),`opt(`notify),
								   // main dialog: RasioButton: don't start inetd
								   _("On with c&ustom configuraton ..."),
								   Inetd::inetd_status == `on_custom )),
						`Label("")
						)
					)
				)
			)
	);


    Wizard::SetContentsButtons ( caption,
				contents,
				MainDialogHelp (),
				BackButtonLabel (),
				FinishButtonLabel () );

    if (Inetd::inetd_status == `on_custom) {
	Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), NextButtonLabel ()));
    }

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	symbol selected = UI::QueryWidget(`id(`inetd), `CurrentButton);
	if (ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if ( UI::ReallyAbortPopup ( true ) )
		break;
	    else
		continue;
	}
	else if (ret == `on_custom)
	{
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), NextButtonLabel ()));
	}
	else if (ret == `on_default)
	{
	    Inetd::inetd_status = `on_default;
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel ()));
	}
	else if (ret == `off)
	{
	    Inetd::inetd_status = `off;
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel ()));
	}
	else if (ret == `next)
	{
	    Inetd::inetd_status = selected;

	    ret = selected;
	    break;
	} else {
	    break;
	}


    };

    return ret;
}


/**
 * Edit or create an entry
 * @return nil on Cancel or a pair on OK:
 * [ edited_comment or "", edited_service_map ]
 */

global define EditOrCreateServiceDlg( string title,
				      map line,
				      string comment,
				      string previous_comment )
    ``{

    symbol status = lookup( line, `status, `inactive );

    term contents =

	`VBox(
	      `VSquash(
		       `HBox(
			     `TextEntry(`id(`service), _("&Service")),
			     `VBox(
				   `VSpacing(),
				   `Bottom(`CheckBox( `id(`status), _("service is &active"),
					    status == `active )
					   )
				   )
			     )
		       ),
	      `HBox(
		    `ComboBox(`id(`type), `opt(`editable, `hstretch),_("&Type"),
			      [ "stream", "dgram", "raw", "rdm","seqpacket" ]
			      ),
		    `ComboBox(`id(`protocol), `opt(`editable,`hstretch),_("&Protocol"),
			      [ "tcp", "udp", "rpc/tcp", "rpc/udp" ]
			      ),
		    // popup create/edit inetd service : Description Inputfield
		    `ComboBox(`id(`flags),`opt(`editable, `hstretch), _("&Flags"),
			      [ "wait", "nowait" ]
			      )
		    ),
	      `VBox(
		    // popup create/edit inetd service : Description Inputfield
		    `TextEntry(`id(`user), _("&User")),
		    // popup create/edit inetd service : Description Inputfield
		    `TextEntry(`id(`servargs), _("S&erver / Args")),
		    // popup create
		    `TextEntry(`id(`comment), _("&Comment")),
		    `Label(_("Previous block comment in inetd.conf")),
		    `RichText( `id(`prev),
			       previous_comment
			       )
		    )
	      );






    Wizard::CreateDialog();
    Wizard::SetContentsButtons (
				title,
				contents,
				EditCreateHelp(),
				CancelButtonLabel(),
				AcceptButtonLabel()
				);

    UI::SetFocus(`id(`service));

    boolean input_is_ok     = true; // not used at the moment
    map     return_value    = $[];
    symbol  doit_int        = `next;
    symbol  doit            = `back;

    UI::ChangeWidget(`id(`service),  `Value, lookup( line, "service",  ""));
    UI::ChangeWidget(`id(`type),     `Value, lookup( line, "type",     ""));
    UI::ChangeWidget(`id(`protocol), `Value, lookup( line, "protocol", ""));
    UI::ChangeWidget(`id(`flags),    `Value, lookup( line, "flags",    ""));
    UI::ChangeWidget(`id(`user),     `Value, lookup( line, "user",     ""));
    UI::ChangeWidget(`id(`servargs), `Value, lookup( line, "servargs", ""));
    UI::ChangeWidget(`id(`comment),  `Value,  comment);

    Wizard::ReplaceAbortButton(`Empty(`id(`abort)));

    repeat {
	input_is_ok = true;
	doit_int = UI::UserInput();

	if  (doit_int == `back)
	    doit = `back;
	else  if (doit_int == `next)
	    doit = `next;
	else
	    doit = `retry;


	if ( doit != `back )
	{
	    if  (UI::QueryWidget(`id(`status), `Value))
	    {
		status = `active;
	    }
	    else
	    {
		status = `inactive;
	    }
	    line = add( line, `status,     status) ;
	    line = add( line, "service",   UI::QueryWidget(`id(`service),  `Value)) ;
	    line = add( line, "type",      UI::QueryWidget(`id(`type),     `Value)) ;
	    line = add( line, "protocol",  UI::QueryWidget(`id(`protocol), `Value)) ;
	    line = add( line, "flags",     UI::QueryWidget(`id(`flags),    `Value)) ;
	    line = add( line, "user",      UI::QueryWidget(`id(`user),     `Value)) ;
	    line = add( line, "servargs",  UI::QueryWidget(`id(`servargs), `Value)) ;

	    comment = UI::QueryWidget(`id(`comment), `Value);

	    if  ((UI::QueryWidget(`id(`service),     `Value) == "")
		 || (UI::QueryWidget(`id(`protocol),  `Value) == "")
		 || (UI::QueryWidget(`id(`type),      `Value) == "")
		 || (UI::QueryWidget(`id(`flags),     `Value) == "")
		 || (UI::QueryWidget(`id(`user),      `Value) == "")
		 || (UI::QueryWidget(`id(`servargs),  `Value) == ""))
	    {
		UI::MessagePopup(_("Error: The server, protocol, flags, type, user, or server/Args field is empty.
Enter valid values.
") );

		input_is_ok = false;
	    }
	}
    } until ( (doit == `next && input_is_ok)  ||  doit == `back );
    Wizard::CloseDialog();
    if ( doit == `back )
    {
          return( nil );
    }
    else
    {
          return( [ comment, line ] );
    }
}



/**
 * Main configuration Dialog
 *
 */

global define ConfigureDialog() ``{
    integer line_counter = 0;

    Inetd::ReadFile();

    list table_data = Inetd::convertInternalToList();

    term contents =
	`VBox(
	      // Main dialog edit inetd.conf
	      `HBox(
		    `Label("     "),
		    `Table(`id(`table),`header( _("Status"),
						// Column header: minimum = 5 characters   fill with space if needed
						_("Service"),
						// Column header: minimum = 4 characters   fill with space if needed
						_("Type "),
						// Column header: Abbrev. for protocol
						`Center(_("Proto")),
						// Column header: minimum = 4 characters /  fill with space if needed
						_("Flags"),
						// Column header
						_("User"), _("Server / Args")),
			   table_data)
		    ),
	      `HBox(
		   `PushButton(`id(`create), _("&Create") ),
		   `PushButton(`id(`delete), _("&Delete") ),
		   `PushButton(`id(`edit),   _("&Edit") ),
		   `PushButton(`id(`switch_activate),   _("&Activate or Deactivate") )
		   )
	      );



    Wizard::SetContents(_("Enable/disable network services"), contents, ConfigureHelp(), true, true );
    // changing Label to Finish
    UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel()  );

    // Bug 20524: autoyast can only enable/disable services.
    // Too late to fix it properly, just disable the buttons.
    if (Mode::config)
    {
	UI::ChangeWidget (`id (`create), `Enabled, false);
	UI::ChangeWidget (`id (`delete), `Enabled, false);
	UI::ChangeWidget (`id (`edit),   `Enabled, false);
    }

     symbol ret = `next;

     repeat
	 {
	     /**
	      *	Convert Internal Map into the Format, the list widget needs
	      */


	     table_data = Inetd::convertInternalToList( );

	     UI::ChangeWidget(`id(`table), `Items,  table_data);

	     ret= UI::UserInput();

	     /**
	      *  CREATE
	      */

	     if (ret == `create)
	     {
		 any w_id = UI::QueryWidget(`id(`table), `CurrentItem);

		 // notify a line is selected
		 if ( w_id == nil ) w_id = 1;

		 list  return_val       = [];
		 map       current_line     = $[ `status:`active,  "service":"", "type":"", "protocol":"", "flags":"", "servargs":"", "user":"", "line_number":w_id ];

		 /*
		  * - create line and comment
		  * - insert line in Database
		  * - compute comment
		  */

		 return_val  = EditOrCreateServiceDlg( _("Create a new service entry"), current_line, "", "" );


		 // check Cancel (== nil)
		 if ( return_val != nil )
		 {
		     current_line = select( return_val, 1 , $[]);

		     Inetd::addLine(  current_line, w_id-1);


		     //   	- a dialog-ouput for comment    -> insert line X-1

		     string new_comment = select( return_val, 0 , "");
		     if ( new_comment != "" )
		     {
			 // B.1
			 map new_line = $[ `status:`comment, "comment":new_comment ];
			 new_line     = add( new_line, "line_number", w_id);
			 Inetd::addLine(  new_line, w_id-1);
		     }
		 }
	     }

	     /**
	      * DELETE
	      */

	     if (ret == `delete)
	     {
		 any w_id = UI::QueryWidget(`id(`table), `CurrentItem);

		 // notify a line is selected
		 if ( w_id != nil )
		 {
		     // first delete line from data_base
		     // then renumber all lines above, so that the line_number
		     // is correct again

		     // delete
		     Inetd::inetd_conf = filter( `line,  Inetd::inetd_conf, ``(lookup( line, "line_number", 0 ) != w_id ) );
		     // renumber
		     Inetd::inetd_conf = maplist( `line, Inetd::inetd_conf,
					   ``{
					       integer curr_number = lookup( line, "line_number", 0 );

					       if ( curr_number > w_id )
					       {
						   return( add( line, "line_number", curr_number -1 ));
					       }
					       else
					       {
						   return( line );
					       }
					   });

		 }
		 else
		 {
		     // No line is selcted:
		     UI::MessagePopup(_("To delete a service, select one in the main dialog") );
		 }

	     }

	     /**
	      * ACTIVATE / INACTIVIATE
	      *
	      */

	     if (ret == `switch_activate)
	     {
		 any w_id = UI::QueryWidget(`id(`table), `CurrentItem);

		 // notify a line is selected
		 if ( w_id != nil )
		 {
		     ///////////////////////////////////////////
		     // - look for the selected line
		     // - change status of line
		     // - change line in Database
		     ///////////////////////////////////////////

		     map current_line = select(
					       filter( `line, Inetd::inetd_conf,
						       ``(lookup( line, "line_number", 0 ) == w_id ) ), 0 , $[]
					       );

		     if ( lookup(current_line,`status,`active) == `active )
		     {
			 current_line = add( current_line, `status, `inactive  );
		     }
		     else
		     {
			 current_line = add( current_line, `status, `active  );
		     }

		     Inetd::changeLine( current_line, w_id);
		 }
		 else
		 {
		     // No line is selcted:
		     UI::MessagePopup(_("To activate or deactivate a service, select it in the main dialog") );
		 }
	     }

	     /**
	      * EDIT
	      * edit line and edit comment
	      *  - you can edit a comment for a service in line X, if this comment is in line X-1
	      *  - else a previous comment is only displayed
	      */


	     if (ret == `edit)
	     {
		 any w_id = UI::QueryWidget(`id(`table), `CurrentItem);

		 // notify a line is selected
		 if ( w_id != nil )
		 {
		     list return_val       = [];
		     boolean   comment_x_1      = false;
		     string    editable_comment = "";
		     map       comment_line     = $[];

		     ///////////////////////////////////////////
		     // - look for the selected line
		     // - look for the editabel comment
		     // - edit line ans comment
		     // - change line in Database
		     // - compute comment
		     ///////////////////////////////////////////

		     map current_line = select( filter( `line, Inetd::inetd_conf,
							``(lookup( line, "line_number", 0 ) == w_id ) ), 0 , $[]
						);

		     // editable comment
		     if ( w_id > 1 )
		     {
			 comment_line = select( filter( `line, Inetd::inetd_conf, ``(lookup( line, "line_number", 0 ) == w_id-1 ) ), 0 , $[]);

			 if ( lookup( comment_line, `status, `active ) == `comment )
			 {
			     comment_x_1 = true;
			     editable_comment = lookup( comment_line, "comment", "");
			 }
		     }

		     // look for previous comment
		     integer i                = w_id;
		     symbol  stat             = `search;
		     string  previous_comment = "";
		     repeat
			 {
			     if ( stat == `search || stat == `read )
			     {
				 map curr_line = select( filter( `line,  Inetd::inetd_conf, ``(lookup( line, "line_number", 0 ) == i ) ), 0, $[]);

				 if ( lookup( curr_line, `status, `active ) == `comment )
				 {
				     previous_comment = sformat( "%1 %2", lookup( curr_line, "comment", ""), previous_comment );
				     stat = `read;
				 }
				 else
				 {
				     if ( stat == `read ) stat = `no_search;
				 }
			     }

			     i = i -1;

			 } until ( i == 0 );

		     // edit line and comment
		     return_val  = 	EditOrCreateServiceDlg( _("Edit a service entry"), current_line, editable_comment, previous_comment );


		     // check Cancel (== nil)
		     if ( return_val != nil )
		     {
			 current_line = select( return_val, 1 , $[]);

			 Inetd::changeLine( current_line, w_id);

			 ////////////////////////////////////
			 // for comment are 4 possibilities
			 // A  - a comment in line X-1
			 // A.1  	- a dialog-ouput for comment    -> change line X-1
			 // A.2  	- no dialog-ouput for comment   -> delete line X-1
			 //
			 // B  - no comment in line X-1
			 // B.1  	- a dialog-ouput for comment    -> insert line X-1
			 // B.2  	- no dialog-ouput for comment   -> nothing ;-))

			 string new_comment = select( return_val, 0 , "");
			 // A
			 if ( comment_x_1 )
			 {
			     if ( new_comment != "" )
			     {
   			   // A.1
				 comment_line = add( comment_line, "comment", new_comment );
				 Inetd::changeLine( comment_line, w_id-1);
			     }
			     else
			     {
				 // A.2
				 Inetd::deleteLine( w_id-1);
			     }
			 }
			 else
			 {
			     if ( new_comment != "" )
			     {
				 // B.1
				 map new_line = $[ `status:`comment, "comment":new_comment ];
				 new_line     = add( new_line, "line_number", w_id);
				 Inetd::addLine( new_line, w_id-1);
			     }
			     else
			     {
				 // B.2
				 // nothing ;-)
			     }
			 }
		     }

		 }
		 else
		 {
		     // No line is selcted:
		     UI::MessagePopup(_("To edit a service, select one in the main dialog") );
		 }
	     } else if (ret == `abort)
	     {
		 if ( UI::ReallyAbortPopup ( true ) )
		     break;
		 else
		     continue;
	     }

	     if (ret == `next  || ret == `back)
	     {
		 if ( ret == `back )
		 {
		     UI::ChangeWidget(`id(`next), `Label, NextButtonLabel() );
		 }

		 if ( ret != `back )
		 {
		     if (ret == `apply) return `again;
		 }
	     }
	 } until (ret == `next || ret == `back || ret == `cancel || ret == `abort);
     return ret;

}

}
