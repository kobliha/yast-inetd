/**
 * File:	include/inetd/ui.ycp
 * Package:	Configuration of inet
 * Summary:	User interface functions.
 * Authors:	Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * All user interface functions.
 */

{

textdomain "inetd";

import "Wizard";
import "Progress";
import "Inetd";
import "Mode";
import "Runlevel";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";
include "wizard/sequencer.ycp";

include "inetd/helps.ycp";

/**
 * local users and groups are stored here
 * We create both lists only once - during first EditOrCreateServiceDlg() call.
 */
global list(string) local_users  = nil;
global list(string) local_groups = nil;

/**
 * These maps are used for (re)selecting table items. This is new inetd GUI improvement! :o)
 */
global map iid_to_index          = $[];
global map index_to_iid          = $[];

/**
 * used for conversion inetd_conf to table's format
 */
global list table_data           = [];

/**
 * Whole configuration of inet
 */
global define InetSequence () ``{
    map aliases =
	$[
	    "detect"    :   ``( DetectService () ),
	    "read"	: [ ``( ReadDialog () ), true ],
	    "main"	:   ``( MainSequence () ),
	    "write"	: [ ``( WriteDialog () ), true ]
	];

    map sequence = $[
	"ws_start" : "detect",
	"detect" :
	$[
	    `abort      : `abort,
	    `next       : "read"
	],
	"read" :
	$[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" :
	$[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    string caption = _("Internet services daemon configuration");
    term contents = `Label (_("Initializing ..."));

    Wizard::CreateDialog ();
    Wizard::SetContentsButtons ( caption,
				contents,
				"",
				BackButtonLabel (),
				NextButtonLabel ());

    any ret = WizardSequencer (aliases, sequence);

    UI::CloseDialog ();
    return ret;
}

/**
 * Whole configuration of inet but without reading and writing.
 * For use with autoinstallation.
 */
global define InetAutoSequence () ``{
    string caption = _("Internet services daemon configuration");
    term contents = `Label (_("Initializing ..."));

    Wizard::CreateDialog ();
    Wizard::SetContentsButtons ( caption,
				contents,
				"",
				BackButtonLabel (),
				NextButtonLabel ());

    // Run the main configuration workflow
    any ret = MainSequence ();

    UI::CloseDialog ();
    return ret;
}

/**
 * Main workflow of the inet configuration
 */
global define MainSequence () ``{
    // TODO FIXME: adapt the following to your needs!
    map aliases =
	$[
	    "main"	:   	``( MainDialog () ),
	    "configure"	: 	``( ConfigureDialog () )
	];

    // TODO FIXME: adapt the following to your needs!
    map sequence = $[
	"ws_start" : "main",
	"main" :
	$[
	    `abort	: `abort,
	    `next	: `next,
	    `back	: `back,
	    `off	: `next,
	    `on_default	: `next,
	    `on_custom	: "configure"
	],
	"configure" :
	$[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    any ret = WizardSequencer (aliases, sequence);

    return ret;
}

/**
 * Read user names from passwd.
 * It does not get the NIS entries.
 * "+" is filtered out.
 */
global define CreateLocalUsersList() ``{
//    if (local_users == nil)
//    {
	// initialize the list
	// CHECK .etc.passwd is in yast2
	list(map) passwd = SCR::Read(.etc.passwd);
	local_users = maplist(map entry, passwd, ``(entry["username"]:""));
	local_users = sort(filter(string u, local_users, ``(u != "+")));
//    }
    return local_users;
}

/**
 * Read group names from  group
 * It does not get the NIS entries.
 * "+" is filtered out.
 */
global define CreateLocalGroupsList() ``{
    list(map) group = SCR::Read(.etc.group);
    local_groups = maplist(map entry, group, ``(entry["groupname"]:""));
    local_groups = sort(filter(string u, local_groups, ``(u != "+")));
    // group entry in inetd_conf can be also empty
    local_groups = add(local_groups, _("--NONE--"));
    return local_groups;
}

/**
 * Detect installed and running service (inetd/xinetd)
 */
global define DetectService () ``{
    string caption = _("Installed services");
    
    term contents =
	`VBox(
	    `Frame(_("Choose service to configure:"),
		`HSquash(
		    `RadioButtonGroup(`id(`service_selection),
			`VBox(
			    `Label(""),
			    `Left(`RadioButton(`id(`inetd_service),
				_("use &inetd"), false)),
			    `Label(""),
			    `Left(`RadioButton(`id(`xinetd_service),
				_("use &xinetd"), true)), //Preselected for default - if none of installed is running
			    `Label("")
			)
		    )
		)
	    )
	);

    // Set help text
    Wizard::RestoreHelp (DetectDialogHelp ());

    // check for installed and running services
    Inetd::GetInstalledServices();
    Inetd::GetServicesStatus();

    // enable user choice if booth are installed
    if ((Inetd::inetd_installed == 0) && (Inetd::xinetd_installed == 0)) {
	Wizard::SetContentsButtons(caption, contents,
	    DetectDialogHelp(), BackButtonLabel(), FinishButtonLabel());
	Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), NextButtonLabel()));
	// set default service (xinetd) to configure
	// if any service is running, this is selected
	// if booth, xinetd is default
	if (Inetd::inetd_status == 0) {
	    UI::ChangeWidget(`id(`inetd_service), `Value, true);
	}
	else {
	    if (Inetd::xinetd_status == 0) {
		UI::ChangeWidget(`id(`xinetd_service), `Value, true);
	    }
	}
	// UI loop
	while (true) {
	    any ret = UI::UserInput();
	    if (ret == `next) {
//		y2milestone("%1", UI::QueryWidget(`id(`service_selection), `CurrentButton));
		if (UI::QueryWidget(`id(`service_selection), `CurrentButton) == `inetd_service) {
		    Inetd::netd_service = `inetd;
		}
		else {
		    Inetd::netd_service = `xinetd;
		}
		break;
	    }
	    // user can safly exit - back and abort do the same, but abort shows confirmation dialog...
	    if (ret == `back) {
		return `abort;
	    }
	    if (ret == `abort) {
		if (UI::ReallyAbortPopup(true)) {
	            return `abort;
		}
	    }
	}
    }
    // only one is installed or none
    else {
	if (Inetd::inetd_installed == 0) {
	    Inetd::netd_service = `inetd;
	}
	if (Inetd::xinetd_installed == 0) {
	    Inetd::netd_service = `xinetd;
	}
    }
    // now, if none installed, we show error dialog and exit...
    if (Inetd::netd_service == `none) {
	UI::WarningPopup(_("No Internet service installed - please install inetd or xinetd."));
	return `abort;
    }
    // finaly: service(s) is/are installed
    // one of one (more) is selected for configuration
    // set running status for next methods (like MainDialog())
    // check for inetd was selected
    if (Inetd::netd_service == `inetd) {
	if (Inetd::inetd_status == 0) {
	    Inetd::netd_status = `on_custom;
	}
	else {
	    Inetd::netd_status = `off;
	}
    }
    else {
	// no? so it must be xinetd :o)
	if (Inetd::xinetd_status == 0) {
	    Inetd::netd_status = `on_custom;
	}
	else {
	    Inetd::netd_status = `off;
	}
    }
    return `next;
}

/**
 * Read settings dialog
 */
global define ReadDialog () ``{
    // Set help text
    Wizard::RestoreHelp (ReadDialogHelp ());

    // A callback function for abort
    block callback = ``{
	return UI::PollInput() == `abort;
    };
    // Read the configuration

    boolean was_ok = Inetd::Read(callback);

    // TODO FIXME possibly handle the abort

    return ( was_ok? `next : `abort );
}

/**
 * Write settings dialog
 */
global define WriteDialog () ``{

    // Set help text
    Wizard::RestoreHelp (WriteDialogHelp ());

    // A callback function for abort
    block callback = ``{
	return UI::PollInput () == `abort;
    };

    // Write the configuration
    boolean was_ok = Inetd::Write (callback);

    return ( was_ok? `next : `abort );
}

/**
 * Main dialog
 */
global define MainDialog () ``{
    string caption     = _("Network services");
    string frame_label = Inetd::netd_service == `inetd ? _("Enable/disable inetd:") : _("Enable/disable xinetd:");

    term contents      =
	`VBox(
	       `Frame ( frame_label,
			`HSquash(
				`RadioButtonGroup (`id(`inetd), //Group
					`VBox(`Label(""),
						`Left(`RadioButton(`id(`off),`opt(`notify),
								   // main dialog: RasioButton: don't start inetd
								   _("Off, &don't start inetd"),
								   Inetd::netd_status == `off)),
								   //false)), //used while debugging
						`Label(""),
						// default on 8.1 is no services, so the option is for future use
						//
						// `Left(`RadioButton(`id(`on_default),`opt(`notify),
						// 		   // main dialog: RasioButton: don't start inetd
						// 		   _("On with d&efault configuration"),
						// 		   Inetd::inetd_status == `on_default )),
						// `Label(""),
						`Left(`RadioButton(`id(`on_custom),`opt(`notify),
								   // main dialog: RasioButton: don't start inetd
								   _("On with &custom configuraton ..."),
								   Inetd::netd_status == `on_custom)),
								   //false)), //used while debugging
						`Label("")
						)
					)
				)
			)
	);


    Wizard::SetContentsButtons ( caption,
				contents,
				MainDialogHelp (),
				BackButtonLabel (),
				FinishButtonLabel () );

    // change Button label depends netd_status
    if (Inetd::netd_status == `on_custom) {
	Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), NextButtonLabel ()));
    }

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	symbol selected = UI::QueryWidget(`id(`inetd), `CurrentButton);
	if (ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if ( UI::ReallyAbortPopup ( true ) )
		break;
	    else
		continue;
	}
	else if (ret == `on_custom)
	{
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), NextButtonLabel ()));
	}
	else if (ret == `on_default)
	{
	    Inetd::netd_status = `on_default;
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel ()));
	}
	else if (ret == `off)
	{
	    Inetd::netd_status = `off;
	    Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel ()));
	}
	else if (ret == `next)
	{
	    Inetd::netd_status = selected;

	    ret = selected;
	    break;
	} else {
	    break;
	}


    };

    return ret;
}


/**
 * Edit or create an entry
 * @return nil on Cancel or a pair on OK:
 * [ edited_comment or "", edited_service_map ]
 */

global define EditOrCreateServiceDlg( string title,
				      map line) ``{
//				      string comment,
//				      string previous_comment ) ``{

    term inetd_specific  = `IntField(`id(`max), _("Ma&x"), 0, 99999, 0); // inetd specific widgets
    term xinetd_specific = `Empty();                                     // xinetd specific widgets
    boolean input_failed = false;                                        // for all required widgets filled check
    symbol  user_choice  = `back;                                        // for UserInput() loop

    // Check for local user list is created...
    if (local_users == nil) {
	CreateLocalUsersList();
    }
    // Check for local group list is created...
    if (local_groups == nil) {
	CreateLocalGroupsList();
    }

    term contents =
	`VBox(
	    `VSquash(
		`HBox(
		    // service name
		    `TextEntry(`id(`service), _("&Service")),
		    `VBox(
			`VSpacing(),
			// service status (running or stopped)
			`Bottom(`CheckBox(`id(`status), _("service is acti&ve"),
			    lookup(line, "enabled", false))
			)
		    )
		)
	    ),
	    `HBox(
		// service socket type
		`HWeight(3,
		    `ComboBox(`id(`type), `opt(`hstretch), _("&Type"),
			["stream", "dgram", "raw", "rdm", "seqpacket"])
		),
		// for protocol option - ediatble ComboBox
		`HWeight(3,
		    `ComboBox(`id(`protocol), `opt(`hstretch), _("&Protocol"),
			["tcp", "udp", "rpc/tcp", "rpc/udp"])
		),
		// for flags (wait/nowait) - noneditable ComboBox
		`HWeight(3,
		    `ComboBox(`id(`flags), `opt(`hstretch), _("&Flags"),
			["wait", "nowait"])
		),
		// check for used service - if inetd, add max TextEntry
		`HWeight((Inetd::netd_service == `inetd) ? 1 : 0,
		    (Inetd::netd_service == `inetd) ? inetd_specific : xinetd_specific
		)
	    ),
	    `VBox(
		// user and group ComboBoxes
		`HBox(
		    `ComboBox(`id(`user), _("&User"), local_users),
		    `ComboBox(`id(`group), _("&Group"), local_groups)
		),
		// Server arguments
		`TextEntry(`id(`servargs), _("S&erver / Args")),
		// Comment above the service line in inetd.conf
		`MultiLineEdit(`id(`comment), _("Co&mment"))
	    )
	);

    Wizard::CreateDialog();
    Wizard::SetContentsButtons (
				title,
				contents,
				EditCreateHelp(),
				CancelButtonLabel(),
				AcceptButtonLabel()
				);

    UI::SetFocus(`id(`service));

    /*
     * NOW!! fill widgets
     *
     * inetd has special widget max - we must check it
     */
    if (Inetd::netd_service == `inetd) {
        any max_value = lookup(line, "max", "0");
	if (max_value == "") {
	    max_value = "0";
	}
	UI::ChangeWidget(`id(`max), `Value, tointeger(max_value));
    }
    UI::ChangeWidget(`id(`service),   `Value, lookup(line, "service",     ""));
    UI::ChangeWidget(`id(`type),      `Value, lookup(line, "socket_type", ""));
    UI::ChangeWidget(`id(`protocol),  `Value, lookup(line, "protocol",    ""));
    if (lookup(line, "wait", true) == true) {
	UI::ChangeWidget(`id(`flags), `Value, "wait");
    }
    else {
	UI::ChangeWidget(`id(`flags), `Value, "nowait");
    }
    UI::ChangeWidget(`id(`user),      `Value, lookup(line, "user",        ""));
    string group = lookup(line, "group", "");
    if (group == "") {
        UI::ChangeWidget(`id(`group), `Value, _("--NONE--"));
    }
    else {
        UI::ChangeWidget(`id(`group), `Value, group);
    }
    UI::ChangeWidget(`id(`servargs),  `Value, lookup(line, "server_args", ""));
    UI::ChangeWidget(`id(`comment),   `Value, lookup(line, "comment",     ""));

    Wizard::ReplaceAbortButton(`Empty(`id(`abort)));

    //UI::UserInput();
    //Wizard::CloseDialog();

//    y2milestone("%1", line);

    // UI Loop
    repeat {
	user_choice = UI::UserInput();

	if (user_choice != `back) {

	    // Are required values filled?
	    if ((UI::QueryWidget(`id(`service), `Value) == "") ||
	      (UI::QueryWidget(`id(`protocol),  `Value) == "") ||
	      (UI::QueryWidget(`id(`type),      `Value) == "") ||
	      (UI::QueryWidget(`id(`flags),     `Value) == "") ||
	      (UI::QueryWidget(`id(`user),      `Value) == "")) {
		UI::MessagePopup(_("Error: The server, protocol, flags, type or user field is empty.
Please enter valid values.
") );
	    input_failed = true;
	    }
	    // YES (input is OK) --- so save settings!
	    else {
		input_failed = false;
		if (UI::QueryWidget(`id(`status), `Value)) {
		    line = add(line, "enabled", true);
		}
		else {
		    line = add(line, "enabled", false);
		}
		if (UI::QueryWidget(`id(`flags), `Value) == "wait") {
		    line = add(line, "wait", true);
		}
		else {
		    line = add(line, "wait", false);
		}
		line = add(line, "service",     UI::QueryWidget(`id(`service),  `Value));
		line = add(line, "socket_type", UI::QueryWidget(`id(`type),     `Value));
		line = add(line, "protocol",    UI::QueryWidget(`id(`protocol), `Value));
		line = add(line, "flags",       UI::QueryWidget(`id(`flags),    `Value));
		line = add(line, "user",        UI::QueryWidget(`id(`user),     `Value));
		line = add(line, "group",       UI::QueryWidget(`id(`group),    `Value));
		line = add(line, "server_args", UI::QueryWidget(`id(`servargs), `Value));
		line = add(line, "comment",     UI::QueryWidget(`id(`comment),  `Value));
		if (Inetd::netd_service == `inetd) {
		    line = add(line, "max", UI::QueryWidget(`id(`max), `Value));
		}
	    }
	}
    } until (((user_choice == `next) && (input_failed == false)) || (user_choice == `back));
    Wizard::CloseDialog();
    // tell the calling function what user done
    if (user_choice == `back) {
	return(nil);  // operation canceled
    }
    else {
	return(line); // line changed
    }
}

/**
 * This function regenerates index_to_iid and iid_to_index maps
 *
 */
global define indexTable() ``{
    integer index = 0;
    iid_to_index  = $[];
    index_to_iid  = $[];
    foreach(`line, Inetd::inetd_conf, ``{
	index = index + 1;
	if (line["deleted"]:false == false) {
	    string iid   = lookup(line, "iid", "");
	    iid_to_index = add(iid_to_index, iid, index);
	    index_to_iid = add(index_to_iid, index, iid);
	}
    });
}


/**
 * Main configuration Dialog
 *
 */

global define ConfigureDialog() ``{
    integer last_created = 0; // used for new iid generator

    //Inetd::ReadFile();
    //Inetd::Read(nil);
    //list table_data = Inetd::inetd_conf;
    //y2milestone ("Inetd::inetd_conf: %1", Inetd::inetd_conf);


    table_data = Inetd::convertInternalToList();
    indexTable();
    term contents =
	`VBox(
	      // Main dialog edit inetd.conf
	      `HBox(
		    //`Label("     "),
		    `Table(`id(`table),`header( `Center(_("Status")),
						// Column header: minimum = 5 characters   fill with space if needed
						_("Service"),
						// Column header: minimum = 4 characters   fill with space if needed
						_("Type "),
						// Column header: Abbrev. for protocol
						`Center(_("Protocol")),
						// Column header: minimum = 4 characters /  fill with space if needed
						_("Flags"),
						// Column header
						_("User"), _("Server / Args")),
			   table_data)
		    ),
	      `HBox(
		   `PushButton(`id(`create), _("&Create") ),
		   `PushButton(`id(`delete), _("&Delete") ),
		   `PushButton(`id(`edit),   _("&Edit") ),
		   `PushButton(`id(`switch_activate),   _("&Activate or Deactivate") )
		   )
	      );



    Wizard::SetContents(_("Enable/disable network services"), contents, ConfigureHelp(), true, true );
    // changing Label to Finish
    UI::ChangeWidget(`id(`next), `Label, FinishButtonLabel()  );

    // Bug 20524: autoyast can only enable/disable services.
    // Too late to fix it properly, just disable the buttons.
    if (Mode::config)
    {
	UI::ChangeWidget (`id (`create), `Enabled, false);
	UI::ChangeWidget (`id (`delete), `Enabled, false);
	UI::ChangeWidget (`id (`edit),   `Enabled, false);
    }

    symbol ret = `next;
    
    // main UI loop
    repeat
	{
	    //table_data = Inetd::inetd_conf;
	    //y2milestone("table_data: %1", table_data);

	    // item ID for `table stored here will be selected
	    string to_select     = "";
	    // skip time critical calculations if need_reindex == false (don't call indexTable())
	    boolean need_reindex = false;
            // skip time critical calculations if need_rebuild == false (don't call convertInternalToList())
	    boolean need_rebuild = true;

	    ret = UI::UserInput();

	    /**
	     *  CREATE
	     */

	    if (ret == `create) {
		any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
		any return_val = [];
		last_created   = last_created + 1; // need uniq
		map  new_line  = $["enabled":true, "service":"", "max":"",
		    "socket_type":"stream", "protocol":"tcp", "wait":true, "server_args":"",
		    "user":"root", "group":"", "comment":"",
		    "iid":"new" + last_created, "created":true];
		// execute dialog
		return_val = EditOrCreateServiceDlg(_("Create a new service entry"), new_line);
		// check Cancel
		if (return_val != nil) {
		    Inetd::addLine(return_val);
		    need_reindex = true;
		    need_rebuild = true;
		    to_select    = "new" + last_created;
		}
		else {
		    need_reindex = false;
		    need_reindex = false;
		    if (selected_item != nil) {
			to_select = selected_item;
		    }
		    else {
			to_select = index_to_iid[1]:"";
		    }
		}
	     }

	     /**
	      * DELETE
	      */

	    if (ret == `delete) {
		any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);

		// one line must be selected
		if (selected_item != nil) {
		    Inetd::deleteLine(selected_item);
		    need_reindex = true;
		    need_rebuild = true;
		    integer old_index = iid_to_index[selected_item]:0;
		    //y2milestone("size: %1", size(iid_to_index));
		    if (old_index == size(iid_to_index)) {
			to_select = index_to_iid[old_index - 1]:"";
		    }
		    else {
			to_select = index_to_iid[old_index + 1]:"";
		    }
		}
		else {
		    UI::MessagePopup(_("To delete a service, select one in the main dialog"));
		    need_reindex = false;
		    need_rebuild = false;
		    to_select    = "";
		}
	    }

	     /**
	      * ACTIVATE / INACTIVIATE
	      *
	      */

	    if (ret == `switch_activate) {
	        // get selected line iid
		any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
//                y2milestone("CurrentItem: %1", UI::QueryWidget(`id(`table), `CurrentItem);
		// notify a line is selected
		if (selected_item != nil) {
                    // look for the selected line
		    map current_line = select(filter(`line, Inetd::inetd_conf,
			``(lookup(line, "iid", "0") == selected_item)), 0, $[]);
                    // change status of line
		    if (lookup(current_line, "enabled", true) == true) {
			current_line = add(current_line, "enabled", false);
		    }
		    else {
			current_line = add(current_line, "enabled", true);
		    }
                    // change line in database
		    Inetd::changeLine(current_line, selected_item);
		    need_reindex = true;
		    need_rebuild = true;
		    to_select    = selected_item;
		}
		else { // No line is selcted:
		    UI::MessagePopup(_("To activate or deactivate a service, select it in the main dialog") );
		    need_reindex = false;
		    need_rebuild = false;
		    to_select    = "";
		}
	    }

	     /**
	      * EDIT
	      * edit line and edit comment
	      *  - you can edit a comment for a service in line X, if this comment is in line X-1
	      *  - else a previous comment is only displayed
	      */


	    if (ret == `edit) {
		// get selected line in table
		need_reindex = false;
		any selected_item = UI::QueryWidget(`id(`table), `CurrentItem);
		// line must be selected
		if (selected_item != nil) {
		    map current_line = select(filter(`line, Inetd::inetd_conf,
			``(lookup(line, "iid", "0") == selected_item)), 0, $[]);
//		    y2milestone("%1", current_line);
		    any return_val = EditOrCreateServiceDlg(_("Edit a service entry"), current_line);
		    // check for changes
		    //y2milestone("return_val: %1", return_val);
		    if (return_val != nil) {
			Inetd::changeLine(return_val, selected_item);
		    }
		    need_reindex = true;
		    need_rebuild = true;
		    to_select = selected_item;
		}
		else {
		     UI::MessagePopup(_("To edit a service, select one in the main dialog") );
		     need_reindex = false;
		     need_rebuild = false;
		     to_select    = "";
		}
	    }

	     if (ret == `abort)
	     {
		 if ( UI::ReallyAbortPopup ( true ) )
		     break;
		 else
		     continue;
	     }

	     if (ret == `next  || ret == `back)
	     {
		 if ( ret == `back )
		 {
		     UI::ChangeWidget(`id(`next), `Label, NextButtonLabel() );
		 }

		 if ( ret != `back )
		 {
		     if (ret == `apply) return `again;
		 }
	     }
	     /**
	      *	Convert Internal Map into the Format, the list widget needs
	      */

	    table_data = Inetd::convertInternalToList();
	    if (need_reindex == true) {
		indexTable();
	    }
	    UI::ChangeWidget(`id(`table), `Items,  table_data);
	    if (to_select != "") {
		UI::ChangeWidget(`id(`table), `CurrentItem, to_select);
	    }

	} until (ret == `next || ret == `back || ret == `cancel || ret == `abort);
     return ret;

}

}
