/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Michael Hager <mike@suse.de>
 *
 * Description:   Choose, if inetd is to start or not
                  if yes: Choose the ports, which are open
 *
 *
 * Purpose:

 * user_settings:
 *
 * external function:  SCR .etc.inetd.conf
 *
 *************************************************************

 $Id$
 
 ---------------------------------------------------------------------------------------
 data structure SCR:
    Example output SCR read inetd.conf
    [
       $["comment":" If you make changes to this file, either reboot your machine or send the"],
       $[],
       $["c_service":"chargen", "dgram_protocol":"udp", "flags":"wait", "servargs":"internal", "user":"root"],
       $["service":"time",      dgram_protocol":"udp", "flags":"wait", "servargs":"internal", "user":"root" ]
    ]
   
 ---------------------------------------------------------------------------------------
 data structure for internal use:
    Example internal data structure
   
       [ $[ `status:`active,    "service":"time", "type":"dgram" "protocol":"udp", "flags":"wait", "servargs":"internal", "user":"root", "line_number":1 ],
   	 $[ `status:`inactive,  "service":"time", "type":"dgram" "protocol":"udp", "flags":"wait", "servargs":"internal", "user":"root", "line_number":2 ],
   	 $[ `status:`comment, "comment":" If you make changes to this file, ", "line_number"=3 ],
   
   
 ---------------------------------------------------------------------------------------
 data structure for the list widget
    Example: Input in ListWidget
   
    `item(`id(1), "  ", "ftp   ", "stream", "tcp", "nowait",	  "root","/usr/sbin/tcpd", "wu.ftpd -a           " ),
    `item(`id(2), "  ", "ftp   ", "stream", "tcp", "nowait",	  "root","/usr/sbin/tcpd", "proftpd		     " ),
    `item(`id(3), "  X ", "ftp   ", "stream", "tcp", "nowait",	  "root","/usr/sbin/tcpd", "in.ftpd		     " ),
    `item(`id(4), "  X", "telnet", "stream", "tcp", "nowait",         "root","/usr/sbin/tcpd", "in.telnetd   " ),

    ---------------------------------------------------------------------------------------
*/

{
    textdomain "lan_inetd"; 
    ////////////////////////////////////////////////////////////
    // Test, if the user wants the inetd.conf custom configuration
    // (this in normally set in inst_inetd_start)

    // warning todo no comment
    //if (lookup(user_settings, "inetd_status", "off") != "on_custom")  return `auto;

    ////////////////////////////////////////////////////////////
    // Testmode, for example fo screenshots
    boolean test_mode    = lookup ( user_settings, "test_mode", false );

    ////////////////////////////////////////////////////////////
    // Read the current architecture (no architecture depended modes yet
    // string architecture = lookup( user_settings, "architecture", default_architecture);



        
    //////////////////////////////////////////////////////////////////////////////////////
    //                                  P O P U P S                                     //
    //////////////////////////////////////////////////////////////////////////////////////


    /*---------------------------------------------------------------------
     * Display "Create/Edit a inetd-service "
     *
     * Input:
     *
     * return: nil for cancel
     *         else: [ comment, line ] 
     *----------------------------------------------------------------------
     */

    UI(``{
          define EditOrCreateServiceDlg( string title, map line, string comment, string previous_comment ) ``{

	      symbol status = lookup( line, `status, `inactive );
	      
              // helptext for popup create inetd-service
              string helptextCR = _("
<p>To create a valid entry i.e. service for the inetd you
have to enter</p> ")+
_("<ul>
<li>service name            
<li>socket type		    
<li>protocol		    
<li>wait/nowait[.max]	    
<li>user[.group]	    
<li>server program	    
<li>server program arguments
</ul>")+
_("<p>To specify an Sun-RPC based service, the entry would contain these
fields:</p>")+
_("<ul>
<li>service name/version    
<li>socket type		    
<li>rpc/protocol	    
<li>wait/nowait[.max]	    
<li>user[.group]	    
<li>server program	    
<li>server program arguments
</ul>")+

_("<p>Here a short description, for details see <b>info inetd.conf</b>
</p>")+

_("<p>The <b>service-name</b> entry is the name of a valid service
</p>")+

_("<p>The <b>socket-type</b> should be one of stream, dgram, raw, rdm,
or seqpacket, depending on whether the socket is a stream, datagram,
raw, reliably delivered message, or sequenced packet socket.

</p>")+
_("<p>The <b>protocol</b> must be a valid protocol as given in /etc/protocols. 
Examples might be <i>tcp</i>,<i>udp</i>,<i>rpc/tcp</i> or <i>rpc/udp</i>.
</p>")+

_("<p>The <b>wait/nowait</b> entry is applicable to datagram sockets only.
The optional <i>max</i> suffix specifies the maximum number of
server instances that may be spawned from inetd within an interval of 60
seconds. 
</p>")+

_("<p>The <b>user</b> entry should contain the user name of the user as whom the 
server should run.
</p>")+

_("<p>The <b>server-program</b> entry should contain the pathname of the program which
is to be executed by inetd when a request is found on its socket. 

</p>")+
_("<p>---</p>");


		 
   OpenDialog( `opt(`decorated,`defaultsize ), `VBox(`Heading(title),
	`HBox(
	      /// left side
	      `RichText( helptextCR ),
	      `HSpacing(1),
	      /// right side
	      `VBox(
		    // popup create edit service: Framedescription
		    // here values for the inetd service can be set
		    `Top( `Frame ( _("Edit service"),
				   `HBox(
					 `HSpacing(1),
			     `VBox(
				   `Left( `CheckBox( `id(`status), _("service is &active"),
							     status == `active )),
				   `HBox( 
					   `HWeight( 3,`VBox(
						 // popup create/edit inetd service : Description Inputfield
						 `TextEntry(`id(`service), _("&Service")),
						 // popup create/edit inetd service : Description Inputfield
						 `Left(`ComboBox(`id(`type), `opt(`editable),_("&Type"), [ "stream", "dgram", "raw", "rdm","seqpacket" ] ))
						 )),
					   `HWeight( 3,`VBox(
						 // popup create/edit inetd service : Description Inputfield
						 `ComboBox(`id(`protocol), `opt(`editable),_("&Protocol"), [ "tcp", "udp", "rpc/tcp", "rpc/udp" ]  ),
						 // popup create/edit inetd service : Description Inputfield
						 `ComboBox(`id(`flags),`opt(`editable), _("&Flags"),  [ "wait", "nowait" ] )
						 ))
					   ),
				     // popup create/edit inetd service : Description Inputfield
				   `TextEntry(`id(`user), _("&User")),
				   // popup create/edit inetd service : Description Inputfield
				   `TextEntry(`id(`servargs), _("S&erver / Args")),
				   // popup create 
				   `TextEntry(`id(`comment), _("&Comment"))
				   ),
					 `HSpacing(1)
					 )
					 
					 )),
		    //`VWeight( 0,`Frame( _("Previous block comment in inetd.conf"), `Label( previous_comment )))
	           `Frame( _("Previous block comment in inetd.conf"), `RichText( previous_comment ))
		    )
	      ),
	`HBox(
	      // popup create service:
	      `PushButton(`id(`ok), `opt(`default),    _("&OK")),
	      // popup create service:
	      `PushButton(`id(`cancel), _("&Cancel"))
	      )
	)
    );

				       
	      
//   OpenDialog( `opt(`decorated,`defaultsize ), `VBox(`Heading(title),
//	`Label(""),
//	`HBox(
//	      /// left side
//	      `RichText( helptextCR ),
//	      /// right side
//	      `VBox(
//		    // popup create edit servive: Framedescription (at the moment empty)
//		    `Frame ( _(""),
//			     `VBox(
//				   `VWeight( 5, `Frame( _(""), `CheckBox( `id(`status), "service is listed only as comment",
//							     status == `inactive ))),
//				   `VWeight( 5,`Label( "" )),
//				   `VWeight( 5,`HBox(
//					 `VBox(
//					       // popup create/edit inetd service : Description Inputfield
//					       `TextEntry(`id(`service), _("&Service")),
//					       // popup create/edit inetd service : Description Inputfield
//					       `TextEntry(`id(`type), _("&Type"))
//					       ),
//					 `VBox(
//					       // popup create/edit inetd service : Description Inputfield
//					       `TextEntry(`id(`protocol), _("&Protocol")),
//					       // popup create/edit inetd service : Description Inputfield
//					       `TextEntry(`id(`flags), _("&Flags"))
//					       )
//					 )),
//				   // popup create/edit inetd service : Description Inputfield
//				   `VWeight( 5,`TextEntry(`id(`user), _("&User"))),
//				   // popup create/edit inetd service : Description Inputfield
//				   `VWeight( 5,`TextEntry(`id(`servargs), _("S&erver / Args"))),
//				   // popup create 
//				   `VWeight( 1,`TextEntry(`id(`comment), _("&Comment")))
//				   )
//			     ),
//		    `Frame( _("Previous comment in inetd.conf"), `RichText( previous_comment ))
//		    ),
//	      `Label(" ")
//	      ),
//	`Label(""),
//	`HBox(
//	      // popup create service:
//	      `PushButton(`id(`ok), `opt(`default),    _("&OK")),
//	      // popup create service:
//	      `PushButton(`id(`cancel), _("&Cancel"))
//	      )
//	)
//    );
	      
    SetFocus(`id(`service));

    boolean input_is_ok     = true; // not used at the moment
    map     return_value    = $[];
    symbol  doit_int        = `ok;
    symbol  doit            = `cancel;

    ChangeWidget(`id(`service),  `Value, lookup( line, "service",  ""));
    ChangeWidget(`id(`type),     `Value, lookup( line, "type",     ""));
    ChangeWidget(`id(`protocol), `Value, lookup( line, "protocol", ""));
    ChangeWidget(`id(`flags),    `Value, lookup( line, "flags",    ""));
    ChangeWidget(`id(`user),     `Value, lookup( line, "user",     ""));
    ChangeWidget(`id(`servargs), `Value, lookup( line, "servargs", ""));
    ChangeWidget(`id(`comment),  `Value,  comment);

    repeat
          {
              //-------------------------------
              // Check the User input / change popup ...
              //-------------------------------
              doit_int = UserInput();

              if       (doit_int == `cancel) doit = `cancel;
              else  if (doit_int == `ok)     doit = `ok;
              else                           doit = `retry;


              if ( doit != `cancel )
              {
		  //------------------------------------------------------------

		  if  (QueryWidget(`id(`status), `Value))
		  {
		      status = `active;
		  }
		  else
		  {
		      status = `inactive;
		  }
		  line = add( line, `status,     status) ;
		  line = add( line, "service",   QueryWidget(`id(`service),  `Value)) ;
                  line = add( line, "type",      QueryWidget(`id(`type),     `Value)) ;
                  line = add( line, "protocol",  QueryWidget(`id(`protocol), `Value)) ;
                  line = add( line, "flags",     QueryWidget(`id(`flags),    `Value)) ;
                  line = add( line, "user",      QueryWidget(`id(`user),     `Value)) ;
                  line = add( line, "servargs",  QueryWidget(`id(`servargs), `Value)) ;
		  
                  comment = QueryWidget(`id(`comment), `Value);
              }
          } until ( (doit == `ok && input_is_ok)  ||  doit == `cancel );

    CloseDialog();

    if ( doit == `cancel )
    {
          return( nil );
    }
    else
    {
          return( [ comment, line ] );
    }
}; });


    
    //////////////////////////////////////////////////////////////////////////////////////
    //                                  D E F I N E S                                   //
    //////////////////////////////////////////////////////////////////////////////////////

    /*---------------------------------------------------------------------
     * delete a line in DB
     *
     * Return value: internal-DB map
     *----------------------------------------------------------------------
     */

    define deleteLine ( list inetd_conf,  integer line_number )
    ``{
	// delete
	inetd_conf = filter( `line,  inetd_conf, ``(lookup( line, "line_number", 0 ) != line_number ) );
	// renumber
	inetd_conf = maplist( `line, inetd_conf,
	``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number -1 );
	    }
	    return( line );
	});

	return( inetd_conf );
    };


    /*---------------------------------------------------------------------
     * add a line in DB
     *
     * Return value: internal-DB map
     *----------------------------------------------------------------------
     */

    define addLine ( list inetd_conf,  map new_line, integer line_number )
    ``{
	// renumber
	inetd_conf = maplist( `line, inetd_conf,
	``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number +1 );
	    }
	    return( line );
	});

	// add
	inetd_conf = add( inetd_conf, new_line );

	return( inetd_conf );
    };


    
    /*---------------------------------------------------------------------
     * Change a line in DB
     *
     * Return value: internal-DB map
     *----------------------------------------------------------------------
     */

    define changeLine ( list inetd_conf,  map new_line, integer line_number )
    ``{
        inetd_conf =  maplist( `line, inetd_conf,
	``{
	    if ( lookup( line, "line_number", 0 ) == line_number )
	    {
		return( new_line );
	    }
	    else
	    {
		return( line );
	    }
	});
	
	return( inetd_conf );
    };

    /*---------------------------------------------------------------------
     * Convert SCR-DB Line to internal DB line
     *
     * Return value: internal-DB map
     *----------------------------------------------------------------------
     */

    define convertScrLineToInternal ( map line, string service, symbol status, integer line_number )
    ``{
	map line_map = $[];

	line_map = add( line_map, `status,       status );
	line_map = add( line_map, "service",     service );
	line_map = add( line_map, "line_number", line_number );
	line_map = add( line_map, "flags",       lookup( line, "flags",    "dgram" ));
	line_map = add( line_map, "servargs",    lookup( line, "servargs", "internal" ));
	line_map = add( line_map, "user",        lookup( line, "user",     "root" ));


	// Check for  sockettype: stream dgram raw rdm seqpacket
	// therefore check EXISTANCE of <sockettype>protocol

	string | void dgram_protocol = lookup( line, "dgram_protocol" );

	if ( dgram_protocol != nil )
	{
	    line_map = add( line_map, "type",       "dgram");
	    line_map = add( line_map, "protocol",    dgram_protocol );
	}
	else
	{
	    string | void stream_protocol = lookup( line, "stream_protocol" );
	    if ( stream_protocol != nil )
	    {
		line_map = add( line_map, "type",       "stream");
		line_map = add( line_map, "protocol",    stream_protocol );
	    }
	    else
	    {
		string | void raw_protocol       = lookup( line, "raw_protocol" );
		string | void rdw_protocol       = lookup( line, "rdw_protocol" );
		string | void seqpacket_protocol = lookup( line, "seqpacket_protocol" );

		if ( raw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "raw");
		    line_map = add( line_map, "protocol",    raw_protocol );
		}
		if ( rdw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "rdw");
		    line_map = add( line_map, "protocol",    rdw_protocol );
		}
		if ( seqpacket_protocol != nil )
		{
		    line_map = add( line_map, "type",       "seqpacket");
		    line_map = add( line_map, "protocol",    seqpacket_protocol );
		}
	    }
	}

	return (line_map);
    };




    /*---------------------------------------------------------------------
     * Convert Internal Map into the Format, the list widget needs
     *
     * Return value: List-DB map
     *----------------------------------------------------------------------
     */

    define convertInternalToList ( list inetd_conf )
    ``{
	list table_input = [];
	
	foreach(`line, inetd_conf, ``{

	    symbol status = lookup(line, `status, `comment);

	    if ( status != `comment )
	    {
		string                   status_str = "  #   ";
		if ( status == `active ) status_str = "Active!  ";

		// todo: fix widget
		// if line to long, helptext is too small
		
		string servargs = lookup( line, "servargs", "");
		
		if ( size(servargs) > 41 )
		{
		    servargs = sformat( "%1 .......", substring( servargs, 0, 36 ));
		}

		term a = `item(`id(lookup( line, "line_number" )),
			       status_str,
			       lookup( line, "service", ""),
			       lookup( line, "type", ""),
			       lookup( line, "protocol", ""),
			       lookup( line, "flags", ""),
			       lookup( line, "user", ""),
			       servargs ) ;

		table_input = add( table_input, a );
	    }

        });
	
	return( table_input );
    };




    /*---------------------------------------------------------------------
     * Write inetd_conf to disk
     * - Convert internal DB into SCR format
     * - write 
     *
     * Return value: -
     *----------------------------------------------------------------------
     */

    define writeInetdConfx ( list inetd_conf )
	  ``{
	      // not tested yet!
	      string send_line = "";
	      _debug( "WriteLine: ", send_line );
		Shell( "/bin/mv /etc/inetd.conf /etc/inetd.conf.sic" );
		Shell( "/bin/rm /etc/inetd.conf " );  // if i have not the permission to move

		list scr_write_input = maplist(`line, inetd_conf,
		   ``{
		
		       map    curr_map = $[];
		       string inetd_conf_line = "";
		
		       symbol status = lookup(line, `status, `comment);
		
		       if ( status != `comment )
		       {
		       if ( status == `active )
		       {
			   inetd_conf_line = sformat( "%1 %2 %3 %4 %5 %6",
						      lookup( line, "service", "error"),     
						      lookup( line, "type",     "error"),     
						      lookup( line, "protocol", "error"),     
						      lookup( line, "flags",    "error"),     
						      lookup( line, "user",     "error"),     
						      lookup( line, "servargs", "error"));
			   send_line = "echo \""+inetd_conf_line+ "\" >>/etc/inetd.conf";
		       }
		       else
		       {
			   inetd_conf_line = sformat( "# %1 %2 %3 %4 %5 %6",
						      lookup( line, "service", "error"),     
						      lookup( line, "type",     "error"),     
						      lookup( line, "protocol", "error"),     
						      lookup( line, "flags",    "error"),     
						      lookup( line, "user",     "error"),     
						      lookup( line, "servargs", "error"));
			   send_line = "echo \""+inetd_conf_line+ "\" >>/etc/inetd.conf" ;
		       }
		       }
		       else
		       {
			   send_line = "echo \"# "+lookup( line, "comment", "")+ "\" >>/etc/inetd.conf";
		       }
		
		       _debug( "WriteLine: ", send_line );
		       Shell( send_line );
		   });

	      _debug( "WWWWWWWWWWWWWWWWWWWVVVVVVV" );
	  };

    
//    define writeInetdConf ( list inetd_conf )
//    {
//	  // not tested yet!
//	    list scr_write_input = maplist(`line, inetd_conf,
//	    ``{
//
//	       map    curr_map = $[];
//	       symbol status = lookup(line, `status, `comment);
//	       
//	       if ( status != `comment )
//	       {
//		   if ( status == `active )
//		   {
//		       curr_map = add( curr_map, "service",  lookup( line, "service", "") );
//		   }
//		   else
//		   {
//		       curr_map = add( curr_map, "c_service",  lookup( line, "service", "") );
//		   }
//	       
//		   string type = lookup( line, "type", "");
//	       
//		   if ( type == "dgram" )     curr_map = add( curr_map,     "dgram_protocol", lookup( line, "protocol", "") );
//		   if ( type == "stream" )    curr_map = add( curr_map,    "stream_protocol", lookup( line, "protocol", "") );
//		   if ( type == "raw" )       curr_map = add( curr_map,       "raw_protocol", lookup( line, "protocol", "") );
//		   if ( type == "rdw" )       curr_map = add( curr_map,       "rdw_protocol", lookup( line, "protocol", "") );
//		   if ( type == "seqpacket" ) curr_map = add( curr_map, "seqpacket_protocol", lookup( line, "protocol", "") );
//	       
//	       
//		   curr_map = add( curr_map, "flags",	   lookup( line, "flags", ""));
//		   curr_map = add( curr_map, "user",	   lookup( line, "user", ""));
//		   curr_map = add( curr_map, "servargs", lookup( line, "servargs", ""));
//	       
//		   return( curr_map );
//	     }
//	     else
//	     {
//		 return( $[ "comment":lookup( line, "comment", "")]);
//	     }
//	    }
//     });
//
//     _debug( "WWWWWWWWWWWWWWWWWWWVVVVVVV", scr_write_input );
//
//    SCR(`Write(.etc.inetd.conf, scr_write_input));
//    };


    

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    // MAIN:
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    // Options to test this modules, but the other modules are in testmode:
    // architecture        = "ppc";
    // test_mode   = true;
       test_mode   = false;
    // todo: comment all options above

    list scr_output = [];        // inetd.conf read from the SCR (data structure: see beginnig of file)     

    if ( test_mode )
    {
	   scr_output = [$["comment":" See \"man 8 inetd\" for more information."], 
            $[], 
            $["comment":" If you make changes to this file, either reboot your machine or send the"], 
            $["comment":" inetd a HUP signal with \"/etc/init.d/inetd reload\" or by hand:"], 
            $[], 
            $["comment":" <service_name> <sock_type> <proto> <flags> <user> <server_path> <args>"], 
            $[], 
            $["c_service":"echo", "flags":"nowait", "protocol":"tcp", "servargs":"internal", "type":"eam", "user":"root"], 
            $["c_service":"echo", "flags":"wait", "protocol":"udp", "servargs":"internal", "type":"am", "user":"root"], 
            $["c_service":"discard", "flags":"nowait", "protocol":"tcp", "servargs":"internal", "type":"eam", "user":"root"], 
            $["c_service":"discard", "flags":"wait", "protocol":"udp", "servargs":"internal", "type":"am", "user":"root"], 
            $["c_service":"daytime", "flags":"nowait", "protocol":"tcp", "servargs":"internal", "type":"eam", "user":"root"], 
            $["c_service":"daytime", "flags":"wait", "protocol":"udp", "servargs":"internal", "type":"am", "user":"root"], 
            $["c_service":"chargen", "flags":"nowait", "protocol":"tcp", "servargs":"internal", "type":"eam", "user":"root"], 
            $["c_service":"chargen", "flags":"wait", "protocol":"udp", "servargs":"internal", "type":"am", "user":"root"], 
            $["flags":"nowait", "servargs":"internal", "stream_protocol":"tcp", "user":"root", "service":"time"], 
            $["dgram_protocol":"udp", "flags":"wait", "servargs":"internal", "user":"root", "service":"time"], 
            $[], 
            $["comment":" These are standard services."], 
            $[], 
            $["c_service":"ftp", "flags":"nowait", "protocol":"tcp", "servargs":"/usr/sbin/tcpd\twu.ftpd -a", "type":"eam", "user":"root"], 
            $["c_service":"ftp", "flags":"nowait", "protocol":"tcp", "servargs":"/usr/sbin/tcpd\tproftpd", "type":"eam", "user":"root"], 
            $["flags":"nowait", "servargs":"/usr/sbin/tcpd\tin.ftpd", "stream_protocol":"tcp", "user":"root", "service":"ftp"], 
            $[], 
            $["comment":" If you want telnetd not to \"keep-alives\" (e.g. if it runs over a ISDN"], 
            $["comment":" uplink), add \"-n\".  See 'man telnetd' for more details."], 
            $["flags":"nowait", "servargs":"/usr/sbin/tcpd\tin.telnetd", "stream_protocol":"tcp", "user":"root", "service":"telnet"], 
            $["c_service":"nntp", "flags":"nowait", "protocol":"tcp", "servargs":"/usr/sbin/tcpd\t/usr/sbin/leafnode", "type":"eam", "user":"news"], 
            $["c_service":"smtp", "flags":"nowait", "protocol":"tcp", "servargs":"/usr/sbin/sendmail    sendmail -bs", "type":"eam", "user":"root"], 
            $["c_service":"printer", "flags":"nowait", "protocol":"tcp", "servargs":"/usr/sbin/tcpd\t/usr/bin/lpd -i", "type":"eam", "user":"root"], 
            $[], 
            $["comment":" Shell, login, exec and talk are BSD protocols."], 
            $["comment":"  The option \"-h\" permits ``.rhosts'' files for the superuser. Please look at"], 
            $["comment":"  man-page of rlogind and rshd to see more configuration possibilities about"], 
            $["comment":"  .rhosts files."], 
            $["flags":"nowait", "servargs":"/usr/sbin/tcpd\tin.rshd -L", "stream_protocol":"tcp", "user":"root", "servicey":"shell"]
	   ];
    }
       
    /////////////////////////////////////////////////////////////////
    //  Read the inetd.conf
    /////////////////////////////////////////////////////////////////

//    if ( !test_mode  )
//    {
//	  scr_output = SCR(`Read(.etc.inetd.conf_read));
//	  _debug( "WWWWWWWWWWWWWWWWWWW", scr_output );
//    }


    
    /////////////////////////////////////////////////////////////////
    //  Convert SCR output into the internal data structure, with status
    //  line number and link to the next line
    /////////////////////////////////////////////////////////////////

    list inetd_conf       = [];
    integer line_counter = 0;
    
//    foreach(`line, scr_output, ``{
//
//	  // look for the type of the line
//	  //
//	  //  lookup( line, "c_service" ); ok? -> inactive entry
//	  //  lookup( line, "service" );   ok? -> active entry
//	  //  lookup( line, "comment" );   ok? -> comment
//	  //  else comment (empty line)
//
//	  map line_map          = $[];
//	  line_counter          = line_counter + 1; //
//
//	  string|void c_service = lookup( line, "c_service" );
//
//	  if ( c_service != nil )
//	  {
//	      line_map   = convertScrLineToInternal( line, c_service, `inactive, line_counter );
//	      inetd_conf = add( inetd_conf, line_map );
//	  }
//	  else
//	  {
//	      string|void   service = lookup( line, "service" );
//	      if ( service != nil )
//	      {
//		  // active entry
//		  line_map   = convertScrLineToInternal( line, service, `active, line_counter );
//		  inetd_conf = add( inetd_conf, line_map );
//	      }
//	      else
//	      {
//		  // comment
//		  string  comment = lookup( line, "comment", " " );
//		  integer next    = line_counter +100;
//		  line_map   = $[ `status:`comment, "comment":comment, "line_number":line_counter  ];
//		  inetd_conf = add( inetd_conf, line_map );
//	      }
//	  }
//     });

    Shell ("/usr/lib/YaST2/bin/build_inetd_conf_ycp.pl");
    inetd_conf = Read( "/tmp/inetd_conf.ycp");
    Shell ("/bin/rm /tmp/inetd_conf.ycp");
    
    list table_data = convertInternalToList( inetd_conf );

    term contents =
       `VBox( 
	// Main dialog edit inetd.conf 
	     `HBox(
		   `Label("     "),
		   `Table(`id(`table),`header( _("Status"),
					       // Column header: minimum = 5 characters   fill with space if needed
					       _("Service"),
					       // Column header: minimum = 4 characters   fill with space if needed
					       _("Type "),
					       // Column header: Abbrev. for protocol
					       `Center(_("Proto")),
					       // Column header: minimum = 4 characters /  fill with space if needed
					       _("Flags"),
					       // Column header
					       _("User"), _("Server / Args")),
			  table_data)
		   ),
	// main dialog: Button Create service
	`HBox( `PushButton(`id(`create), _("&Create") ),
	       // main dialog: Button Delete service
	       `PushButton(`id(`delete), _("&Delete") ),
	       // main dialog: Button Edit service
	       `PushButton(`id(`edit),   _("&Edit") ),
	       // main dialog: Button Edit service
	       `PushButton(`id(`switch_activate),   _("&Activate/Inactivate") )
	       )
	);

    string help_text = "";

    // helptext  "main dialog edit inetd.conf" 
    help_text =  UI(_("<p>In the listbox you see all services preconfigured by SuSE</p>"))
	+
UI(_("<p>All services marked with \"#\" are <i>inactive</i> (locked).
All services marked with \"Active!\" are <i>active</i> (unlocked).</p>")) +
UI(_("<p>Inactive means, that these services are preconfigured in the configuration
file of inetd (/etc/inetd.conf), but they are locked.</p>
")) +
UI(_("<p>With a click to this entry, and a second click
on the button activate/inactivate you can unlock an inactive entry, or
lock an active entry.</p>
")) +
UI(_("<p>With a click to an entry, and a second click
on the button edit you can change parameters of this service
</p>"));

     help_text = help_text + "<p>(.13)</p>";

     // using SetContents (define in lan_inetd.ycp)
     UI(`SetContents(_("Enable/disable network services"), contents, help_text, true, true ));
     // changing Label to Finish
     UI(`ChangeWidget(`id(`next), `Label,  _("&Finish") ) );
      
     // todo debug raus!!
     // map curr_line = lookup( inetd_conf, 400 );
     // _debug( "DDSSAA",  curr_line );
     // curr_line     = add( curr_line, `status, `active );
     // inetd_conf    = add( inetd_conf, 400, curr_line );

     // todo debug raus!! end


   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  Loop for User Input ....
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    symbol ret = `next;

    repeat
    {
	/////////////////////////////////////////////////////////////////
	//  Convert Internal Map into the Format, the list widget needs
	/////////////////////////////////////////////////////////////////

        table_data = convertInternalToList( inetd_conf );
	
	UI( `ChangeWidget(`id(`table), `Items,  table_data));

        ret= UI(`UserInput());

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  CREATE
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        if (ret == `create)
        {
	    any w_id = UI( `QueryWidget(`id(`table), `CurrentItem) );

	    // notify a line is selected
	    if ( w_id == nil ) w_id = 1; 

	    list|void return_val       = [];
	    map       current_line     = $[ `status:`active,  "service":"", "type":"", "protocol":"", "flags":"", "servargs":"", "user":"", "line_number":w_id ];
		
	    ///////////////////////////////////////////
	    // - create line and comment
	    // - insert line in Database
	    // - compute comment
	    ///////////////////////////////////////////
		
	    return_val  = UI(`EditOrCreateServiceDlg( _("Create a new service entry"), current_line, "", "" ));

	    _debug( "JJJJJJJJ", return_val, w_id );
		
             // check Cancel (== nil) 
	    if ( return_val != nil )
	    {
		current_line = select( return_val, 1 );
   
		inetd_conf = addLine( inetd_conf, current_line, w_id-1);
   
		////////////////////////////////////
		//   	- a dialog-ouput for comment    -> insert line X-1
		
		string new_comment = select( return_val, 0 ); 
		if ( new_comment != "" )
		{
		    // B.1
		    _debug( "B1", new_comment, w_id );
		    map new_line = $[ `status:`comment, "comment":new_comment ];
		    new_line     = add( new_line, "line_number", w_id);
		    inetd_conf   = addLine( inetd_conf, new_line, w_id-1);
		}
	    }
	}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  DELETE
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        if (ret == `delete)
        {
	    any w_id = UI( `QueryWidget(`id(`table), `CurrentItem) );

	    // notify a line is selected
	    if ( w_id != nil )
	    {
		// first delete line from data_base
                // then renumber all lines above, so that the line_number
		// is correct again

		// delete
		inetd_conf = filter( `line,  inetd_conf, ``(lookup( line, "line_number", 0 ) != w_id ) );
		// renumber
		inetd_conf = maplist( `line, inetd_conf,
		``{
		    integer curr_number = lookup( line, "line_number", 0 );

		    if ( curr_number > w_id )
		    {
			return( add( line, "line_number", curr_number -1 ));
			
		    }
		    else
		    {
			return( line );
		    }
		});
			
	    }
	    else
	    {
              // No line is selcted:
              UI(`DisplayMessage(_("To delete a service, you have to select one in main dialog") ));
	    }

	}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  ACTIVATE / INACTIVIATE
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        if (ret == `switch_activate)
        {
	    any w_id = UI( `QueryWidget(`id(`table), `CurrentItem) );

	    // notify a line is selected
	    if ( w_id != nil )
	    {
		///////////////////////////////////////////
		// - look for the selected line
		// - change status of line
		// - change line in Database
		///////////////////////////////////////////
		
		map current_line = select( filter( `line, inetd_conf, ``(lookup( line, "line_number", 0 ) == w_id ) ), 0 );

		if ( lookup(current_line,`status,`active) == `active )
		{
		    current_line = add( current_line, `status, `inactive  );
		}
		else
		{
		    current_line = add( current_line, `status, `active  );
		}

		inetd_conf = changeLine( inetd_conf, current_line, w_id);
	    }
	    else
	    {
		// No line is selcted:
		UI(`DisplayMessage(_("To activate/inactivate a service, you have to select one in main dialog") ));
	    }
	}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  EDIT
	///   edit line and edit comment
	//    - you can edit a comment for a service in line X, if this comment is in line X-1
	//    - else a previous comment is only displayed  
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        if (ret == `edit)
        {
	    any w_id = UI( `QueryWidget(`id(`table), `CurrentItem) );

	    // notify a line is selected
	    if ( w_id != nil )
	    {
		list|void return_val       = [];
		boolean   comment_x_1      = false;
		string    editable_comment = "";
		map       comment_line     = $[];
		
		///////////////////////////////////////////
		// - look for the selected line
		// - look for the editabel comment
		// - edit line ans comment
		// - change line in Database
		// - compute comment
		///////////////////////////////////////////
		
		map current_line = select( filter( `line, inetd_conf, ``(lookup( line, "line_number", 0 ) == w_id ) ), 0 );

		// editable comment
		if ( w_id > 1 )
		{
		    comment_line = select( filter( `line, inetd_conf, ``(lookup( line, "line_number", 0 ) == w_id-1 ) ), 0 );

		    if ( lookup( comment_line, `status, `active ) == `comment )
		    {
			comment_x_1 = true;
			editable_comment = lookup( comment_line, "comment", "");
		    }
		}

		// look for previous comment
		integer i                = w_id;
		symbol  stat             = `search;
		string  previous_comment = "";
 		repeat
		{
		    if ( stat == `search || stat == `read )
		    {
		       map curr_line = select( filter( `line,  inetd_conf, ``(lookup( line, "line_number", 0 ) == i ) ), 0);

		       if ( lookup( curr_line, `status, `active ) == `comment )
		       {
			   previous_comment = sformat( "%1 %2", lookup( curr_line, "comment", ""), previous_comment );
			   stat = `read;
		       }
		       else
		       {
			   if ( stat == `read ) stat = `no_search;
		       }
		    }

		    i = i -1;
			
		} until ( i == 0 );
		
		// edit line and comment
		return_val  = UI(`EditOrCreateServiceDlg( _("Edit a service entry"), current_line, editable_comment, previous_comment ));

		_debug( "JJJJJJJJ", return_val, w_id );
		
		// check Cancel (== nil) 
		if ( return_val != nil )
		{
   		   current_line = select( return_val, 1 );
   
   		   inetd_conf = changeLine( inetd_conf, current_line, w_id);
   
   		   ////////////////////////////////////
   		   // for comment are 4 possibilities
   		   // A  - a comment in line X-1
   		   // A.1  	- a dialog-ouput for comment    -> change line X-1
   		   // A.2  	- no dialog-ouput for comment   -> delete line X-1
   		   //
   		   // B  - no comment in line X-1
   		   // B.1  	- a dialog-ouput for comment    -> insert line X-1
   		   // B.2  	- no dialog-ouput for comment   -> nothing ;-))
   
   		   string new_comment = select( return_val, 0 ); 
   		   // A
   		   if ( comment_x_1 )
   		   {
   		       if ( new_comment != "" )
   		       {
             		   _debug( "A111", new_comment );
   			   // A.1
   			   comment_line = add( comment_line, "comment", new_comment );
   			   inetd_conf       = changeLine( inetd_conf, comment_line, w_id-1);
   		       }
   		       else
   		       {
   			   // A.2
             		   _debug( "A222", return_val );
   			   inetd_conf   = deleteLine( inetd_conf, w_id-1);
   		       }
   		   }
   		   else
   		   {
   		       if ( new_comment != "" )
   		       {
   			   // B.1
             		   _debug( "B1", new_comment, w_id );
   			   map new_line = $[ `status:`comment, "comment":new_comment ];
   			   new_line     = add( new_line, "line_number", w_id);
   			   inetd_conf   = addLine( inetd_conf, new_line, w_id-1);
   		       }
   		       else
   		       {
   			   // B.2
   			   // nothing ;-)
   		       }
   		   }
		}    
		
	    }
	    else
	    {
              // No line is selcted:
              UI(`DisplayMessage(_("To edit a service, you have to select one in main dialog") ));
	    }
	}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  
        ////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (ret == `next || ret == `language || ret == `back)
	{
	    _debug ("WHOLLLLLLE", ret );

	    if ( ret == `next )
	    {
		// todo SCR ...
		
		writeInetdConfx( inetd_conf );

                // todo error message if a failure occur
		Shell("/etc/init.d/inetd restart");

	    }

	    if ( ret == `back )
	    {
		 UI(`ChangeWidget(`id(`next), `Label,  _("&Next") ) );
	    }

	    if ( ret != `back )
	    {
		if (ret == `apply) return `again;
	    }
	}

	// debug:
	// foreach( `line, inetd_conf, ``{ _debug( "DB", line );  } ); 

  } until (ret == `next || ret == `back || ret == `cancel);

   return ret;


}



