/**
 * File:
 *   modules/Inetd.ycp
 *
 * Package:
 *   Configuration of Inetd
 *
 * Summary:
 *   Data for configuration of Inetd, input and output functions.
 *
 * Authors:
 *   Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * Representation of the configuration of Inetd.
 * Input and output routines.
 *
 */

{
    // Set the name of the module
    module "Inetd";
    import "Progress";
    import "Runlevel";
    import "Report";

    textdomain "lan_inet";



    global symbol  inetd_status = `off;

    global list inetd_conf       = [];

    boolean file_read = false;

    global boolean changed_conf = false;
    
    /**
     * Read all Inetd settings from the SCR
     * @param abort A block that can be called by Read to find
     *	      out whether abort is requested. Returns true if abort
     *	      was pressed.
     * @return True on success
     */
    global define boolean Read (block abort) ``{
		
	boolean start_inetd = Runlevel::ServiceEnabled ("inetd");
	 
	/* check if there is a default for inetd.conf, else create one
	 * different inetd.conf and inetd.conf.default will set inetd_status = `on_custom
	 */
	
	if ( SCR::Read(.target.size, "/etc/inetd.conf.default") != -1 )
	{
	    SCR::Execute(.target.bash, "/bin/cp /etc/inetd.conf /etc/inetd.conf.default" );
	    if( start_inetd) inetd_status = `on_default;
	}
	else
	{
	    if (  SCR::Execute(.target.bash, "/usr/bin/diff /etc/inetd.conf /etc/inetd.conf.default") != 0 )
	    {
		if( start_inetd )
		    inetd_status = `on_custom;
	    }
	    else
	    {
		if( start_inetd )
		    inetd_status = `on_default;
	    }    
	}
	
	return true;
    }

    /**
     * Read inetd.conf file
     * @return void
     */
      
    global define ReadFile()``{

	if (!file_read) {
	    changed_conf = false;
	    SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/build_inetd_conf_ycp.pl");
	    inetd_conf =  SCR::Read(.target.ycp, "/tmp/inetd_conf.ycp");
	    SCR::Execute(.target.bash, "/bin/rm /tmp/inetd_conf.ycp");
	    if (size(inetd_conf)>0)
		file_read = true;
	}
	return;
    }

    /**
     * Update the SCR according to Inetd settings
     * @param abort A block that can be called by Write to find
     *	      out whether abort is requested. Returns true if abort
     *	      was pressed.
     * @return True on success
     */
    global define boolean Write (block abort) ``{

	y2milestone("Calling Write");
	boolean write_aborted = false;
	
	string caption = _("Saving Inetd service configuration");
	
	integer no_of_steps = 2 ;
	
	Progress::New ( caption, " ", no_of_steps,
		       [ _("Write the new inted.conf"),
			 _("Restart inted service") ],
		       [ _("Writing the new inted.conf..."),
			 _("Restarting inted service..."),
			 _("Finished") ],
		       "" );

	
	
	Progress::NextStage();
	if (changed_conf && inetd_status == `on_custom ) {
	    WriteInetdConf();
	}

	Progress::NextStage();
	
	if (inetd_status == `off)
	{
	    y2milestone("Turning service inetd off");
	    Runlevel::ServiceAdjust("inetd", "disable");
	    Runlevel::RunInitScript("inetd", "stop");
	}
	else {		
	    Runlevel::ServiceAdjust("inetd", "enable");
	    if (inetd_status == `on_default)
		if (SCR::Read(.target.size, "/etc/inetd.conf.default")>0)
		    SCR::Execute(.target.bash,   "/bin/cp /etc/inetd.conf.default /etc/inetd.conf" );
	    
	    if (0 != Runlevel::RunInitScript ("inetd", "restart"))
	    {
		y2error ("Can not start service");
		return false;
	    }

	}
		 	

	// increase the progress to "finish"
	Progress::Finish ();
	return !write_aborted;
    }

    /**
     * Get all Inetd settings from the first parameter
     * (For use by autoinstallation.)
     * @param settings The YCP structure to be imported.
     * @return True on success
     * @example settings=$["start_inetd":true,
     "services":[
                 $[
		 "service":"telnet",
		 "status":"enable"
		 ]
     ]
     */

 
    
    global define boolean Import (map settings) ``{
	if (size (settings) == 0)
	{	
	    return false;
	}

	boolean missing = false;
	foreach (`k, ["start_inetd", "services"], ``{
	    if (! haskey (settings, k))
	    {
		y2error ("Missing at Import: '%1'.", k);
		missing = true;
	    }
	});
	if (missing)
	{
	    return false;
	}

	    
	if (settings["start_inetd"]:false && size(settings["services"]:[])>0)
	{
	    inetd_status = `on_custom;
	    ReadFile();
	    foreach(`s, settings["services"]:[], ``{
		if (s["status"]:"" == "enable" || s["status"]:"" == "disable") {
		    ChangeServiceStatus(s["service"]:"none", s["status"]:"none");
		}
	    });
	    
	}
	else if (settings["start_inetd"]:false && size(settings["services"]:[])==0)
	{
	    inetd_status = `on_default;
	} else {
	    inetd_status = `off;
	}

	
	
	return true;
    }

    /**
     * Find a service in the parsed file
     * @return map: service map
     */
	
	
    define map FindService(string service)``{
	return (select( filter( `line,
				inetd_conf,
				``(line["service"]:"none" == service)
				), 0 , $[]));
    }

    
    global define ChangeServiceStatus(string service, string status)
	``{
	ReadFile();
	map service_line = FindService(service);
	if (size(service_line)>0) {
	    if (status == "enable")
		change(service_line,`status,`active);
	    else if (status == "disable")
		change(service_line,`status,`inactive);
	}
	changeLine( service_line, service_line["line_number"]:0);
	
    }

    
    /**
     * Dump the Inetd settings to a single map
     * (For use by autoinstallation.)
     * @return Dumped settings (later acceptable by Import ())
     */
    global define map Export () ``{
	boolean start_inetd = false;
	if (inetd_status != `off)
	    start_inetd = true;

		
	return $["start_inetd":start_inetd, "services":[]];
    }

    /**
     * Build a textual summary that can be used e.g. in inst_hw_config () or
     * something similar.
     * @return Summary of the configuration.
     */
    global define string Summary () ``{
	
	return _("Summary of the configuration...");
    }

 


    global define deleteLine (  integer line_number )
    ``{
	// delete
	changed_conf = true;
	inetd_conf = filter( `line,  inetd_conf, ``(lookup( line, "line_number", 0 ) != line_number ) );
	// renumber
	inetd_conf = maplist( `line, inetd_conf, ``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number -1 );
	    }
	    return( line );
	});
	
    };


    /**
     * add a line in DB
     * @return void
     */

    global define void addLine (  map new_line, integer line_number )
    ``{
	changed_conf = true;
	// renumber
	inetd_conf = maplist( `line, inetd_conf,
	``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number +1 );
	    }
	    return( line );
	});

	// add
	inetd_conf = add( inetd_conf, new_line );
	return;
    }


    
    /**	
     * Change a line in DB    
     * Return value: internal-DB map     
     */

    global define changeLine (   map new_line, integer line_number )
    ``{
	changed_conf = true;
        inetd_conf =  maplist( `line, inetd_conf,
	``{
	    if ( lookup( line, "line_number", 0 ) == line_number )
	    {
		return( new_line );
	    }
	    else
	    {
		return( line );
	    }
	});
	
	
    };

    /**
     * Convert SCR-DB Line to internal DB line     
     * Return value: internal-DB map     
     */

    global define convertScrLineToInternal ( map line, string service, symbol status, integer line_number )
    ``{
	map line_map = $[];

	line_map = add( line_map, `status,       status );
	line_map = add( line_map, "service",     service );
	line_map = add( line_map, "line_number", line_number );
	line_map = add( line_map, "flags",       lookup( line, "flags",    "dgram" ));
	line_map = add( line_map, "servargs",    lookup( line, "servargs", "internal" ));
	line_map = add( line_map, "user",        lookup( line, "user",     "root" ));


	// Check for  sockettype: stream dgram raw rdm seqpacket
	// therefore check EXISTANCE of <sockettype>protocol

	string  dgram_protocol = lookup( line, "dgram_protocol" , "");

	if ( dgram_protocol != nil )
	{
	    line_map = add( line_map, "type",       "dgram");
	    line_map = add( line_map, "protocol",    dgram_protocol );
	}
	else
	{
	    string  stream_protocol = lookup( line, "stream_protocol" , "");
	    if ( stream_protocol != nil )
	    {
		line_map = add( line_map, "type",       "stream");
		line_map = add( line_map, "protocol",    stream_protocol );
	    }
	    else
	    {
		string  raw_protocol       = lookup( line, "raw_protocol" , "");
		string  rdw_protocol       = lookup( line, "rdw_protocol" , "");
		string  seqpacket_protocol = lookup( line, "seqpacket_protocol" , "");

		if ( raw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "raw");
		    line_map = add( line_map, "protocol",    raw_protocol );
		}
		if ( rdw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "rdw");
		    line_map = add( line_map, "protocol",    rdw_protocol );
		}
		if ( seqpacket_protocol != nil )
		{
		    line_map = add( line_map, "type",       "seqpacket");
		    line_map = add( line_map, "protocol",    seqpacket_protocol );
		}
	    }
	}

	return (line_map);
    };




    /**
     * Convert Internal Map into the Format, the list widget needs     
     * Return value: List-DB map     
     */

    global define convertInternalToList ( )
    ``{
	list table_input = [];
	
	foreach(`line, inetd_conf, ``{

	    symbol status = lookup(line, `status, `comment);

	    if ( status != `comment )
	    {
		string                   status_str = "  #   ";
		if ( status == `active ) status_str = "Active!  ";

		// todo: fix widget
		// if line to long, helptext is too small
		
		string servargs = lookup( line, "servargs", "");
		
		if ( size(servargs) > 41 )
		{
		    servargs = sformat( "%1 .......", substring( servargs, 0, 36 ));
		}

		term a = `item(`id(lookup( line, "line_number" , 0)),
			       status_str,
			       lookup( line, "service", ""),
			       lookup( line, "type", ""),
			       lookup( line, "protocol", ""),
			       lookup( line, "flags", ""),
			       lookup( line, "user", ""),
			       servargs ) ;

		table_input = add( table_input, a );
	    }

        });
	
	return( table_input );
    };




    /**
     * Write inetd_conf to disk
     * - Convert internal DB into SCR format
     * - write      
     * Return value: -     
     */

    global define WriteInetdConf ( )
	``{
	// not tested yet!
	string send_line = "";
	SCR::Execute(.target.bash, "/bin/mv /etc/inetd.conf /etc/inetd.conf.sic" );
	SCR::Execute(.target.bash, "/bin/rm /etc/inetd.conf " );  // if i have not the permission to move
	string file = "";
	foreach(`line, inetd_conf,``{
					   
	    string inetd_conf_line = "";	    
	    symbol status = lookup(line, `status, `comment);
	
	    if ( status != `comment )
	    {
		if ( status == `active )
		{
		    inetd_conf_line = sformat( "%1 %2 %3 %4 %5 %6\n",
					       lookup( line, "service", "error"),     
					       lookup( line, "type",     "error"),     
					       lookup( line, "protocol", "error"),     
					       lookup( line, "flags",    "error"),     
					       lookup( line, "user",     "error"),     
					       lookup( line, "servargs", "error"));
		}
		else
		{
		    inetd_conf_line = sformat( "# %1 %2 %3 %4 %5 %6\n",
					       lookup( line, "service", "error"),     
					       lookup( line, "type",     "error"),     
					       lookup( line, "protocol", "error"),     
					       lookup( line, "flags",    "error"),     
					       lookup( line, "user",     "error"),     
					       lookup( line, "servargs", "error"));
		}
	    }
	    else
	    {
		inetd_conf_line="# " + lookup( line, "comment", "") + "\n";		
	    }	    
	    file = file + inetd_conf_line;

	});
	if (size(file)>0) {
	    SCR::Write(.target.string, "/etc/inetd.conf", file);
	} else {
	    Report::Error(_("Configuration is empty"));
	}
    }
    
}
