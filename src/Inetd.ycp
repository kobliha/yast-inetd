/**
 * File:	modules/Inetd.ycp
 * Package:	Configuration of inetd
 * Summary:	Data for configuration of inetd, input and output functions.
 * Authors:	Petr Hadraba <phadraba@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of inetd.
 * Input and output routines.
 */

{

module "Inetd";
textdomain "inetd";

import "Progress";
import "Report";
import "Summary";

include "inetd/routines.ycp";

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
global boolean modified = false;

global boolean proposal_valid = false;
global boolean write_only = false;

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};

// Settings: Define all variables needed for configuration of inetd
// TODO FIXME: Define all the variables necessary to hold
// TODO FIXME: the configuration here (with the appropriate
// TODO FIXME: description)
// TODO FIXME: For example:
//   /**
//    * List of the configured cards.
//    */
//   list cards = [];
//
//   /**
//    * Some additional parameter needed for the configuration.
//    */
//   boolean additional_parameter = true;

/**
 * hold informations about installed services (rpm -q exit code).
 * 0 means installed, anything else means no or error
 */
global integer inetd_installed   = -1;
global integer xinetd_installed  = -1;

/**
 * What service is ready for configuration?
 * `none   means no available --- this is for AutoInstallation
 * `both   means the selection dialog will be displayed (only one service can run)
 * `inetd  inetd will be configured
 * `xinetd xinetd will be configured
 */
global symbol netd_service       = `none;

/**
 * What service was configured?
 * Same values as netd_service except `both
 */
global symbol configured_service = `none;

/**
 * These variables hold service's configuration
 */
global list inetd_conf           = [];
global list xinetd_conf          = [];

/**
 * Holds configuration of selected service.
 */
global list netd_conf            = [];

/**
 * Is inetd (or xinetd) running?
 */
global integer inetd_status      = -1;
global integer xinetd_status     = -1;

/**
 * Status of edited service (see WhatToConfigureDialog() in dialogs.ycp)
 */
global integer netd_status       = -1;

/**
 * Read all inetd settings
 * @return true on success
 */
global define boolean Read() ``{

    /* Inetd read dialog caption */
    string caption = _("Initializing inetd configuration");

    integer steps = 1;

    integer sl = 0;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    _("Read the configuration"),
	], [
	    _("Reading the configuration..."),
	    _("Finished")
	],
	""
    );

    integer read_status = 0;
    // read database
    if(Abort()) return false;

    if(netd_service == `none)
	return false;

    if(netd_service == `both) {
	inetd_conf  = SCR::Read(.etc.inetd.services);
	xinetd_conf = SCR::Read(.etc.xinetd.services);
    }
    else if(netd_service == `inetd) {
	inetd_conf = SCR::Read(.etc.inetd.services);
    }
    else if(netd_service == `xinetd) {
	xinetd_conf = SCR::Read(.etc.xinetd.services);
    }

    // in future: catch error
    if(false) Report::Error(_("Can not read the database1!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    Progress::Finish();
    return true;
}

/**
 * Write all inetd settings
 * @return true on success
 */
global define boolean Write() ``{

    /* Inetd read dialog caption */
    string caption = _("Saving inetd configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 1;

    integer sl = 0;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    _("Write the settings"),
	], [
	    _("Writing the settings..."),
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
//    y2milestone("%1, %2", configured_service, netd_status);
    if (netd_status != 0) {
	Runlevel::ServiceAdjust("inetd", "disable");
	Runlevel::RunInitScript("inetd", "stop");
	Runlevel::ServiceAdjust("xinetd", "disable");
	Runlevel::RunInitScript("xinetd", "stop");
    }
    // custom
    else {
	if (configured_service == `inetd) {
	    // xinetd must be stopped - if installed
	    if (xinetd_installed == 0) {
		Runlevel::ServiceAdjust("xinetd", "disable");
		Runlevel::RunInitScript("xinetd", "stop");
	    }
	    SCR::Write(.etc.inetd.services, netd_conf);
	    // So, Restart service
	    // if inetd is running - only reload
	    if (inetd_status == 0) {
		Runlevel::RunInitScript("inetd", "force-reload");
	    }
	    // if stopped - enable and start
	    else {
		Runlevel::ServiceAdjust("inetd", "enable");
		Runlevel::RunInitScript("inetd", "start");
	    }
	}
	// configured service is xinetd
	else {
	    // inetd must be stopped - if installed
	    if (inetd_installed == 0) {
		Runlevel::ServiceAdjust("inetd", "disable");
		Runlevel::RunInitScript("inetd", "stop");
	    }
	    SCR::Write(.etc.xinetd.services, netd_conf);
	    // So, Restart service
	    // if xinetd is running - only reload
	    if (inetd_status == 0) {
		Runlevel::RunInitScript("xinetd", "force-reload");
	    }
	    // if stopped - enable and start
	    else {
		Runlevel::ServiceAdjust("xinetd", "enable");
		Runlevel::RunInitScript("xinetd", "start");
	    }
	}
    }

    // in future: catch errors
    if(false) Report::Error (_("Can not write settings!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    Progress::Finish();
    return true;
}

/**
 * Get all inetd settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global define boolean Import (map settings) ``{
    // TODO FIXME: your code here (fill the above mentioned variables)...
    sleep(3000);
    return true;
}

/**
 * Dump the inetd settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global define map Export () ``{
    // TODO FIXME: your code here (return the above mentioned variables)...
    sleep(3000);
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary() ``{
    // TODO FIXME: your code here...
    return [ _("Configuration summary ..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global define list Overview() ``{
    // TODO FIXME: your code here...
    return [];
}

/**
 * delete line in netd_conf
 * @param line_number "iid" geted from table's item ID
 * @return If success returns updated line
 */
global define deleteLine(any line_number) ``{
    // delete
    map current_line = select(filter(`line, netd_conf,
	``(lookup(line, "iid", "0") == line_number)), 0, $[]);
    // set "deleted" flag to true
    current_line = add(current_line, "deleted", true);
    netd_conf    = maplist(`line, netd_conf, ``{
	if (lookup(line, "iid", "0") == line_number) {
	    return(current_line);
	}
	else {
	    return(line);
	}
    });
};


/**
 * add a line in DB
 * @return void
 */
global define void addLine(map new_line) ``{
    // add
    netd_conf = add(netd_conf, new_line);
    return;
}

/**
 * Change a line in DB
 * @return  internal-DB map
 */
global define changeLine(map new_line, any line_number) ``{
    // entry was changed - so set "changed" flag to true
    new_line  = add(new_line, "changed", true);
    netd_conf = maplist(`line, netd_conf, ``{
	if (lookup(line, "iid", "0") == line_number) {
	    return(new_line);
	}
	else {
	    return(line);
	}
    });
};


/* EOF */
}
