/**
 * File:	modules/Inetd.ycp
 * Package:	Configuration of inetd
 * Summary:	Data for configuration of Inetd, input and output functions.
 * Authors:	Michael Hager <mike@suse.de>
 *
 * $Id$
 *
 * Representation of the configuration of Inetd.
 * Input and output routines.
 */

{

    module "Inetd";
    textdomain "inetd";

    import "Progress";
    import "Runlevel";
    import "Report";
    import "Mode";
    import "Summary";
    import "Directory";
    

    global symbol  inetd_status = `off;

    /**
     * /etc/inetd.conf, as a list of lines
     * where lines are maps, all containing:
     *   "line_number": integer
     *   `status: `comment, `active or `inactive // note `status, not "status"
     * And additionally, depending on `status:
     * For `comment:
     *   // TODO: does it include #, space or \n?
     *   "comment": string
     * For `active and `inactive:
     * All are strings corresponding to fields of inetd.conf
     *   "service"
     *   "type"
     *   "protocol"
     *   "flags"
     *   "user"
     *   "servargs": combines server and its arguments
     */
    global list inetd_conf       = [];

    boolean file_read = false;

    global boolean changed_conf = false;

    /**
     * New SCR interface:
     * A service map looks like this:
     * $[
     *   "service": string	// * different from equally named field above
     *   "rpc_version": string
     *   "socket_type": string
     *   "protocol": string
     *   "wait": boolean
     *   "max": integer		// inetd only
     *   "user": string		// *
     *   "group": string
     *   "server": string
     *   "server_args": string
     *   "comment": string	// possibly multiline, without #
     * ]
     * When handling existing maps, take care to preserve any other fields
     * that may be present!
     *
     * path netd = .whatever.inetd or .whatever.xinetd;
     *
     * SCR::Read (netd + .services) -> list of service maps
     *   There should be a warning if inetd and xinetd are both installed
     * SCR::Read (netd + .services + service_name) -> service map (or empty)
     * SCR::Read (netd + .services + service_name + field) -> (any) field
     * SCR::Write (netd, nil) -> boolean
     *   Commits changes performed by other writes (see below) to disk
     * // Hm, maybe we should check that vaid fields are passed?
     * SCR::Write (netd + .services, list of service maps) -> true
     * SCR::Write (netd + .services + service_name, service map) -> true
     * SCR::Write (netd + .services + service_name + field, any) -> true
     *   This last one should be useful for autoyast - changing just
     *   the "enabled" field.
     */

    /**
     * Determines inetd_status
     * @return True on success
     */
    global define boolean Read (block abort) ``{

	boolean start_inetd = Runlevel::ServiceEnabled ("inetd");

	/* check if there is a default for inetd.conf, else create one
	 * different inetd.conf and inetd.conf.default will set inetd_status = `on_custom
	 */

	if ( SCR::Read(.target.size, "/etc/inetd.conf.default") != -1 )
	{
	    SCR::Execute(.target.bash, "/bin/cp /etc/inetd.conf /etc/inetd.conf.default" );
	    if( start_inetd) inetd_status = `on_default;
	}
	else
	{
	    if (  SCR::Execute(.target.bash, "/usr/bin/diff /etc/inetd.conf /etc/inetd.conf.default") != 0 )
	    {
		if( start_inetd )
		    inetd_status = `on_custom;
	    }
	    else
	    {
		if( start_inetd )
		    inetd_status = `on_default;
	    }
	}

	return true;
    }

    /**
     * Read inetd.conf file
     * @return void
     */

    global define ReadFile()``{

	if (!file_read) {
	    changed_conf = false;
	    SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/build_inetd_conf_ycp.pl");
	    inetd_conf =  SCR::Read(.target.ycp, "/var/lib/YaST2/inetd_conf.ycp");
	    SCR::Execute(.target.bash, "/bin/rm /var/lib/YaST2/inetd_conf.ycp");
	    if (inetd_conf == nil)
	    {
		inetd_conf = [];
	    }

	    if (size(inetd_conf)>0)
	    {
		file_read = true;
	    }
	    if (Mode::config)
	    {
		inetd_conf = makeAllInactive();
	    }
	}
	return;
    }

    /**
     * Changes configuration only, services are not started
     * @return boolean
     */
    global define boolean WriteOnly()``{
	if (changed_conf && inetd_status == `on_custom )
	{
	    Runlevel::ServiceAdjust("network", "enable");
	    Runlevel::ServiceAdjust("inetd", "enable");
	    WriteInetdConf();
	    return true;
	}

	if (inetd_status == `off)
	{
	    y2milestone("Turning service inetd off");
	    Runlevel::ServiceAdjust("inetd", "disable");
	    return true;
	}
	else
	{
	    Runlevel::ServiceAdjust("network", "enable");
	    Runlevel::ServiceAdjust("inetd", "enable");
	    if (inetd_status == `on_default)
		if (SCR::Read(.target.size, "/etc/inetd.conf.default")>0)
		    SCR::Execute(.target.bash,   "/bin/cp /etc/inetd.conf.default /etc/inetd.conf" );
	    return true;
	}
	return true;
    }



    /**
     * Update the SCR according to Inetd settings
     * @param abort A block that can be called by Write to find
     *	      out whether abort is requested. Returns true if abort
     *	      was pressed.
     * @return True on success
     */
    global define boolean Write (block abort) ``{

	y2milestone("Calling Write");
	boolean write_aborted = false;

	string caption = _("Saving Inetd service configuration");

	integer no_of_steps = 2 ;

	Progress::New ( caption, " ", no_of_steps,
		       [ _("Write the new inetd.conf"),
			 _("Restart inetd service") ],
		       [ _("Writing the new inetd.conf..."),
			 _("Restarting inetd service..."),
			 _("Finished") ],
		       "" );



	Progress::NextStage();
	if (changed_conf && inetd_status == `on_custom ) {
	    WriteInetdConf();
	}

	Progress::NextStage();

	if (inetd_status == `off)
	{
	    y2milestone("Turning service inetd off");
	    Runlevel::ServiceAdjust("inetd", "disable");
	    Runlevel::RunInitScript("inetd", "stop");
	}
	else {
	    Runlevel::ServiceAdjust("inetd", "enable");
	    if (inetd_status == `on_default)
		if (SCR::Read(.target.size, "/etc/inetd.conf.default")>0)
		    SCR::Execute(.target.bash,   "/bin/cp /etc/inetd.conf.default /etc/inetd.conf" );

	    if (0 != Runlevel::RunInitScript ("inetd", "restart"))
	    {
		y2error ("Can not start service");
		return false;
	    }

	}


	// increase the progress to "finish"
	Progress::Finish ();
	return !write_aborted;
    }

    /**
     * Get all Inetd settings from the first parameter
     * (For use by autoinstallation.)
     * @param settings The YCP structure to be imported.
     * @return True on success
     * @example settings=$["start_inetd":true,
     "services":[
                 $[
		 "service":"telnet",
		 "status":"enable"
		 ]
     ]
     */
    global define boolean Import (map settings) ``{
	if (size (settings) == 0)
	{
	    return false;
	}

	Set(settings);
	return true;
    }

    /**
     * Find a service in the parsed file
     * @return map: service map
     */
    define map FindService(string service)``{
	return (select( filter( `line,
				inetd_conf,
				``(line["service"]:"none" == service)
				), 0 , $[]));
    }

    /**
     * Change service status
     * @param service service to change
     * @param status new status
     * @return true on success
     */
    global define boolean ChangeServiceStatus(string service, string status)
	``{
	ReadFile();
	map service_line = FindService(service);
	if (size(service_line)>0) {
	    if (status == "enable")
		change(service_line,`status,`active);
	    else if (status == "disable")
		change(service_line,`status,`inactive);
	}
	changeLine( service_line, service_line["line_number"]:0);
	return true;
    }


    /**
     * Dump the Inetd settings to a single map
     * (For use by autoinstallation.)
     * @return Dumped settings (later acceptable by Import ())
     */
    global define map Export () ``{
	boolean start_inetd = false;
	if (inetd_status != `off)
	    start_inetd = true;
	list services = [];
	foreach(`line, inetd_conf,
		``{
	    symbol status = lookup(line, `status, `comment);
	    if ( status == `active)
	    {
		services = add(services,$["service_name": line["service"]:"",
					  "service_status": "enable"]);
	    }
	});
	return $["start_inetd":start_inetd, "inetd_services":services];
    }

    /**
     * Build a textual summary that can be used e.g. in inst_hw_config () or
     * something similar.
     * @return Summary of the configuration.
     */
    global define string Summary ()
	``{
	list services = [];
	foreach(`line, inetd_conf,
		``{
	    symbol status = lookup(line, `status, `comment);
	    if ( status == `active)
	    {
		services = add(services,$["service_name": line["service"]:"",
					  "service_status": "enable"]);
	    }
	});

	string summary = "";
	summary = Summary::AddHeader(summary, _("Enabled Services"));
	if (size(services)==0)
	{
	    summary = Summary::AddLine(summary,  Summary::NotConfigured ());
	}
	else
	{
	    summary = Summary::OpenList(summary);
	    foreach(`s,services,``{
		summary = Summary::AddListItem(summary, s["service_name"]:"error");
	    });
	    summary = Summary::CloseList(summary);
	}
	return summary;
    }


     /**
     * Build a textual summary that can be used e.g. in inst_hw_config () or
     * something similar.
     * @return Summary of the configuration.
     */
    global define void Set (map settings) ``{
	if (settings["start_inetd"]:false && size(settings["inetd_services"]:[])>0)
	{
	    inetd_status = `on_custom;
	    ReadFile();
	    foreach(`s, settings["inetd_services"]:[], ``{
		if (s["service_status"]:"" == "enable" || s["service_status"]:"" == "disable") {
		    ChangeServiceStatus(s["service_name"]:"none", s["service_status"]:"none");
		}
	    });

	}
	else if (settings["start_inetd"]:false && size(settings["inetd_services"]:[])==0)
	{
	    inetd_status = `on_default;
	} else {
	    inetd_status = `off;
	}
	changed_conf = true;

	return;
    }


    global define deleteLine (  integer line_number )
    ``{
	// delete
	changed_conf = true;
	inetd_conf = filter( `line,  inetd_conf, ``(lookup( line, "line_number", 0 ) != line_number ) );
	// renumber
	inetd_conf = maplist( `line, inetd_conf, ``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number -1 );
	    }
	    return( line );
	});

    };


    /**
     * add a line in DB
     * @return void
     */

    global define void addLine (  map new_line, integer line_number )
    ``{
	changed_conf = true;
	// renumber
	inetd_conf = maplist( `line, inetd_conf,
	``{
	    integer curr_number = lookup( line, "line_number", 0 );

	    if ( curr_number > line_number )
	    {
		line = add( line, "line_number", curr_number +1 );
	    }
	    return( line );
	});

	// add
	inetd_conf = add( inetd_conf, new_line );
	return;
    }



    /**
     * Change a line in DB
     * @return  internal-DB map
     */

    global define changeLine (   map new_line, integer line_number )
    ``{
	changed_conf = true;
        inetd_conf =  maplist( `line, inetd_conf,
	``{
	    if ( lookup( line, "line_number", 0 ) == line_number )
	    {
		return( new_line );
	    }
	    else
	    {
		return( line );
	    }
	});


    };

    /**
     * UNUSED
     * Convert SCR-DB Line to internal DB line
     * @return internal-DB map
     */

    global define convertScrLineToInternal ( map line, string service, symbol status, integer line_number )
    ``{
	map line_map = $[];

	line_map = add( line_map, `status,       status );
	line_map = add( line_map, "service",     service );
	line_map = add( line_map, "line_number", line_number );
	line_map = add( line_map, "flags",       lookup( line, "flags",    "dgram" ));
	line_map = add( line_map, "servargs",    lookup( line, "servargs", "internal" ));
	line_map = add( line_map, "user",        lookup( line, "user",     "root" ));


	// Check for  sockettype: stream dgram raw rdm seqpacket
	// therefore check EXISTANCE of <sockettype>protocol

	string  dgram_protocol = lookup( line, "dgram_protocol" , "");

	if ( dgram_protocol != nil )
	{
	    line_map = add( line_map, "type",       "dgram");
	    line_map = add( line_map, "protocol",    dgram_protocol );
	}
	else
	{
	    string  stream_protocol = lookup( line, "stream_protocol" , "");
	    if ( stream_protocol != nil )
	    {
		line_map = add( line_map, "type",       "stream");
		line_map = add( line_map, "protocol",    stream_protocol );
	    }
	    else
	    {
		string  raw_protocol       = lookup( line, "raw_protocol" , "");
		string  rdw_protocol       = lookup( line, "rdw_protocol" , "");
		string  seqpacket_protocol = lookup( line, "seqpacket_protocol" , "");

		if ( raw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "raw");
		    line_map = add( line_map, "protocol",    raw_protocol );
		}
		if ( rdw_protocol != nil )
		{
		    line_map = add( line_map, "type",       "rdw");
		    line_map = add( line_map, "protocol",    rdw_protocol );
		}
		if ( seqpacket_protocol != nil )
		{
		    line_map = add( line_map, "type",       "seqpacket");
		    line_map = add( line_map, "protocol",    seqpacket_protocol );
		}
	    }
	}

	return (line_map);
    };


    /**
     * Make all services inactive
     * @return List-DB map
     */

    global define list(map) makeAllInactive ()
    ``{
	list table_input = [];

	return maplist(`line, inetd_conf, ``{
	    if (line[`status]:`none == `active)
		line[`status] = `inactive;
	    return line;
	});
    }

    /**
     * Convert Internal Map into the Format, the list widget needs
     * @return List-DB map
     */

    global define list(term) convertInternalToList ( )
    ``{
	list table_input = [];

	foreach(`line, inetd_conf, ``{

	    symbol status = lookup(line, `status, `comment);

	    if ( status != `comment )
	    {
		string status_str = "  #   ";

		if ( status == `active )
		{
		    status_str    = "Active!  ";
		}

		// todo: fix widget
		// if line to long, helptext is too small

		string servargs = lookup( line, "servargs", "");

		if ( size(servargs) > 41 )
		{
		    servargs = sformat( "%1 .......", substring( servargs, 0, 36 ));
		}

		term a = `item(`id(lookup( line, "line_number" , 0)),
			       status_str,
			       lookup( line, "service", ""),
			       lookup( line, "type", ""),
			       lookup( line, "protocol", ""),
			       lookup( line, "flags", ""),
			       lookup( line, "user", ""),
			       servargs ) ;

		table_input = add( table_input, a );
	    }

        });

	return( table_input );
    };




    /**
     * Write inetd_conf to disk
     * - Convert internal DB into SCR format
     * - write
     * @return -
     */

    global define void WriteInetdConf ( )
	``{
	// not tested yet!
	string send_line = "";
	SCR::Execute(.target.bash, "/bin/mv /etc/inetd.conf /etc/inetd.conf.sic" );
	// Check if file still there and try to remove again, in case we dont have the permission to move
	if (SCR::Read(.target.size, "/etc/inetd.conf") > 0  )
	{
		SCR::Execute(.target.bash, "/bin/rm /etc/inetd.conf " );
	}
	string file = "";
	foreach(`line, inetd_conf,``{

	    string inetd_conf_line = "";
	    symbol status = lookup(line, `status, `comment);

	    if ( status != `comment )
	    {
		if ( status == `active )
		{
		    inetd_conf_line = sformat( "%1 %2 %3 %4 %5 %6\n",
					       lookup( line, "service", "error"),
					       lookup( line, "type",     "error"),
					       lookup( line, "protocol", "error"),
					       lookup( line, "flags",    "error"),
					       lookup( line, "user",     "error"),
					       lookup( line, "servargs", "error"));
		}
		else
		{
		    inetd_conf_line = sformat( "# %1 %2 %3 %4 %5 %6\n",
					       lookup( line, "service", "error"),
					       lookup( line, "type",     "error"),
					       lookup( line, "protocol", "error"),
					       lookup( line, "flags",    "error"),
					       lookup( line, "user",     "error"),
					       lookup( line, "servargs", "error"));
		}
	    }
	    else
	    {
		inetd_conf_line="# " + lookup( line, "comment", "") + "\n";
	    }
	    file = file + inetd_conf_line;

	});

	if (size(file)>0)
	{
	    SCR::Write(.target.string, "/etc/inetd.conf", file);
	}
	else
	{
	    Report::Error(_("Configuration is empty"));
	}
    }

}
