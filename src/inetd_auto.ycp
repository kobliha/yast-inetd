/**
 * File:	clients/inetd_auto.ycp
 * Package:	Configuration of inetd
 * Summary:	Client for autoinstallation
 * Authors:	Petr Hadraba <phadraba@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of inetd settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallModule ("inetd_auto", [ mm ]);
 */

{

textdomain "inetd";

y2milestone("----------------------------------------");
y2milestone("Inetd auto started");

import "Inetd";
include "inetd/wizards.ycp";
include "inetd/dialogs.ycp";

/* The settings are in the second argument */
string func  = (string) WFM::Args(0);
map    param = (map) WFM::Args(1);
any    ret   = nil;

y2milestone("func = %1", func);

y2milestone("%1, %2", func, param);

/**
 * Create a summary
 * return string
 */
if(func == "Summary") {
    Inetd::Import(param);
    ret = Inetd::Summary();
    //ret = select(Inetd::Summary(), 0 , "");
}
/**
 * Reset configuration
 * return map or list
 */
else if (func == "Reset") {
    // We can load default during first "Change" call :o)
    Inetd::Import($[]);
    ret = $[];
}
/**
 * Change configuration
 * return symbol (i.e. `finish || `accept || `next || `cancel || `abort)
 */
else if (func == "Change") {
//    Inetd::Import(param);

    ret = PackageAutoDialog();
    if(ret == `back) {
	return ret;
    }

    ret = InetdAutoSequence();
}
/**
 * Return list of needed packages
 * return map or list
 */
else if (func == "Read") {
    Progress::off();
    Inetd::netd_service = `both;
    ret = Inetd::Read();
    Progress::on();
}
/**
 * Return list of needed packages
 * return map or list
 */
else if (func == "Packages") {
    ret = Inetd::AutoPackages();
}
/**
 * Return configuration data
 * return map or list
 */
else if (func == "Export") {
    ret = Inetd::Export();
}
/**
 * Write configuration data
 * return boolean
 */
else if (func == "Write") {
	import "Progress";
	Progress::off();
    Inetd::write_only = true;
    ret = Inetd::Write();
	Progress::on();
}
/**
 * Import settings
 * return boolean
 */
else if (func == "Import") {
    ret = Inetd::Import(param);
}

/* unknown function */
else {
    y2error("unknown function: %1", func);
    ret = false;
}

y2debug("ret=%1", ret);
y2milestone("Inetd auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
