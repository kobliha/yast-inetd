// Author: Martin Vidner <mvidner@suse.cz>
// $Id$
// continue from all-services.sh

// See doc/README.maintainer
{
    /**
     * cache:
     * server -> package
     */
    map<string, string> package_cache = $[
	// no package specified => assume it is already installed
	"": "",			// internal services for xinetd
	"internal": "",		// internal services for inetd

	// this program is in multiple packages
	// Assume it is already installed, smtp_daemon
	// is required at a very low level
	// (which it is, regardless of the rpm)
	"/usr/sbin/sendmail": "",

	// Not present in the distro.
	// So pretend that they _are_ present so that
	// their installation is not attempted
	// TODO: filter them out in the UI
	"/usr/sbin/in.comsat": "",
	"/usr/lib/xcept4/bin/ceptd": "",
	"/usr/sbin/in.midinetd": "",
	"/opt/mimer/bin/mimtcp": "",
	"/usr/sbin/procstatd": "",
	"/usr/sbin/in.ftpd": "", // in 9.0 but not 9.1
	];

    /**
     * Log a string and put a dot to stdout
     * @param s string
     */
    define void Progress (string s) ``{
	y2milestone ("%1", s);
	SCR::Write (.target.string, "/dev/stdout", ".");
    }

    /**
     * Shortcut for first element of splitstring
     * @param whole a string
     * @param delimiters where to split
     * @return first element
     */
    define string first_of_split (string whole, string delimiters) ``{
	return select (splitstring (whole, delimiters), 0, "");
    }

    /**
     * @param query will be substituted to --filter '%1'
     * @return a list of packages that match
     */
    define list<string> PdbQuery (string query) ``{
	string cmd = sformat (
	    "/usr/bin/pdb query --filter '%1' --attribs packname 2>/dev/null",
	    query);
	string out = lookup ((map) SCR::Execute (.target.bash_output, cmd),
			     "stdout", "");
	list<string> lines = filter (string l, splitstring (out, "\n"),
				      ``( l != ""));
	// pdb adds trailing spaces
	return maplist (string l, lines, ``( first_of_split (l, " ")));
    }

    typedef list<map <string, any> > services_t;

    /**
     * @param services default services list
     * @param xinetd is this xinetd
     * @return services list with "package" determined
     */
    define services_t DeterminePackages (services_t services,
						boolean xinetd) ``{
	y2milestone ("%1", xinetd? "xinetd": "inetd");
	return maplist (map<string, any> service, services, ``{
	    string sname = (string) (service["service"]:nil);
	    string server = service["server"]:"";
	    if (server == "/usr/sbin/tcpd")
	    {
		server = first_of_split (service["server_args"]:"", " \t");
	    }

	    // Ask which package has the server. If there are more
	    // and it is xinetd, ask which package has the config
	    // snippet.
	    // Will caching work OK?
	    // Xinetd should go first as it can provide more info

	    // /usr/sbin for packages run via tcpd
	    string package = (string) (package_cache[server]: (package_cache["/usr/sbin/"+server]: nil));
	    if (package == nil)
	    {
		list<string> packages = PdbQuery ("rpmfile:*" + server);
		if (size (packages) > 1)
		{
		    y2milestone ("Resorting to init script");
		    string script = "xinetd.d/" + (string) (service["script"]:nil);
		    packages =  PdbQuery ("rpmfile:*" + script);
		}

		if (size (packages) != 1)
		{
		    y2error ("%1# %2", server, size (packages));
		}
		package = packages[0]:"";
		package_cache[server] = package;
	    }
	    Progress (sformat ("%1: %2 (%3)", server, package, sname));

	    return add (service, "package", package);
	});
    }

    // needs ycp.pm,v 1.6
    SCR::RegisterAgent (.aaa.inetd, `ag_netd (`Inetd ("etc/inetd.conf")));
    services_t dc_inetd = (services_t) SCR::Read (.aaa.inetd.services);

    SCR::RegisterAgent (.aaa.xinetd, `ag_netd (`Xinetd ("all-services.conf")));
    services_t dc_xinetd = (services_t) SCR::Read (.aaa.xinetd.services);

    y2milestone ("inetd: %1, xinetd: %2", size (dc_inetd), size (dc_xinetd));

    dc_xinetd = DeterminePackages (dc_xinetd, true);
    dc_inetd = DeterminePackages (dc_inetd, false);
    // watch out, a single value, not an include
    SCR::Write (.target.ycp, "default_conf_inetd.ycp", dc_inetd);
    SCR::Write (.target.ycp, "default_conf_xinetd.ycp", dc_xinetd);

    SCR::Write (.target.string, "/dev/stdout", "\n");
}
